
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Oct 26 19:08:52 CST 2023
//----------------------------------------------------

package analizadores;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Hashtable;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Thu Oct 26 19:08:52 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\064\002\000\002\003" +
    "\006\000\002\003\003\000\002\004\003\000\002\005\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\011\003\000\002\012\004\000\002\012\002\000\002" +
    "\062\010\000\002\013\011\000\002\013\003\000\002\013" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\025\010\000" +
    "\002\025\006\000\002\025\004\000\002\014\006\000\002" +
    "\014\002\000\002\015\007\000\002\015\002\000\002\063" +
    "\004\000\002\016\010\000\002\016\004\000\002\017\004" +
    "\000\002\017\002\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\022\010\000\002" +
    "\023\006\000\002\037\012\000\002\037\016\000\002\037" +
    "\004\000\002\041\012\000\002\040\012\000\002\040\016" +
    "\000\002\044\012\000\002\045\007\000\002\045\005\000" +
    "\002\045\003\000\002\046\005\000\002\046\003\000\002" +
    "\046\002\000\002\047\005\000\002\047\003\000\002\050" +
    "\005\000\002\050\003\000\002\050\002\000\002\051\007" +
    "\000\002\052\004\000\002\053\007\000\002\054\007\000" +
    "\002\026\004\000\002\026\002\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\002\000\002\030\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\060\007\000\002\061\005\000\002\061" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\034\004\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\036\006\000\002\036\006\000\002\036\002\000" +
    "\002\042\004\000\002\042\003\000\002\043\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\003\005\004\000\001\002\000\004\002" +
    "\374\001\002\000\004\002\ufffe\001\002\000\004\004\007" +
    "\001\002\000\022\003\ufff6\007\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\062\ufff6\001\002\000\022\003\023" +
    "\007\024\022\013\023\020\024\015\025\011\026\016\062" +
    "\012\001\002\000\004\062\uffee\001\002\000\006\005\366" +
    "\006\367\001\002\000\004\062\ufff1\001\002\000\022\003" +
    "\ufff7\007\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\062\ufff7\001\002\000\004\062\uffef\001\002\000\004\062" +
    "\uffed\001\002\000\004\062\364\001\002\000\004\062\ufff0" +
    "\001\002\000\004\064\357\001\002\000\022\003\ufff3\007" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\062\ufff3" +
    "\001\002\000\006\067\356\071\303\001\002\000\004\062" +
    "\351\001\002\000\004\064\027\001\002\000\004\002\uffff" +
    "\001\002\000\016\022\013\023\020\024\015\025\011\026" +
    "\016\065\uffe8\001\002\000\004\062\341\001\002\000\004" +
    "\065\032\001\002\000\004\066\033\001\002\000\046\003" +
    "\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\031\uffe1\062\uffe1\067\uffe1\001\002\000\046" +
    "\003\056\007\024\011\055\013\065\014\063\015\062\016" +
    "\044\017\040\020\036\021\061\022\013\023\020\024\015" +
    "\025\011\026\016\031\043\062\060\067\064\001\002\000" +
    "\050\003\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\062\uffd7\067\uffd7" +
    "\001\002\000\004\064\335\001\002\000\004\071\334\001" +
    "\002\000\004\071\333\001\002\000\050\003\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\031\uffdf\062\uffdf\067\uffdf\001\002\000\050\003" +
    "\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\031\uffda\062\uffda\067\uffda\001\002" +
    "\000\056\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\060\ufffd\061\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\001\002\000\004\064\327" +
    "\001\002\000\010\045\321\046\320\070\322\001\002\000" +
    "\050\003\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\062\uffd6\067\uffd6" +
    "\001\002\000\050\003\uffd9\007\uffd9\010\uffd9\011\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\062" +
    "\uffd9\067\uffd9\001\002\000\050\003\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\031\uffdc\062\uffdc\067\uffdc\001\002\000\050\003\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\031\uffdb\062\uffdb\067\uffdb\001\002\000\050" +
    "\003\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\031\uffe2\062\uffe2\067\uffe2\001" +
    "\002\000\050\003\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031\uffe0\062\uffe0" +
    "\067\uffe0\001\002\000\050\003\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031" +
    "\uffdd\062\uffdd\067\uffdd\001\002\000\004\064\304\001\002" +
    "\000\006\067\302\071\303\001\002\000\004\062\274\001" +
    "\002\000\004\031\043\001\002\000\004\064\261\001\002" +
    "\000\004\064\233\001\002\000\004\064\215\001\002\000" +
    "\022\003\ufff4\007\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\062\ufff4\001\002\000\004\064\070\001\002\000" +
    "\050\003\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\062\uffd8\067\uffd8" +
    "\001\002\000\050\003\uffde\007\uffde\010\uffde\011\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\031\uffde\062" +
    "\uffde\067\uffde\001\002\000\044\027\104\030\112\031\043" +
    "\033\110\034\074\035\113\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\100\057\111\062\060\064\072" +
    "\065\uffb6\001\002\000\046\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\060\uffae\061\uffae\063\uffae\065\uffae\071" +
    "\uffae\072\uffae\001\002\000\044\027\104\030\112\031\043" +
    "\033\110\034\074\035\113\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\100\057\111\062\060\064\072" +
    "\065\uffb6\001\002\000\046\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\060\uffa7\061\uffa7\063\uffa7\065\uffa7\071" +
    "\uffa7\072\uffa7\001\002\000\046\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\060\ufffc\061\ufffc\063\ufffc\065\ufffc" +
    "\071\ufffc\072\ufffc\001\002\000\016\060\203\061\204\063" +
    "\uff91\065\uff91\071\uff91\072\uff91\001\002\000\042\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\047\127\050" +
    "\124\051\126\052\123\053\130\054\125\063\uffaa\065\uffaa" +
    "\071\uffaa\072\uffaa\001\002\000\046\036\160\037\162\040" +
    "\161\041\163\042\155\043\157\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\060\uffaf\061\uffaf\063\uffaf\065" +
    "\uffaf\071\uffaf\072\uffaf\001\002\000\004\062\151\001\002" +
    "\000\026\047\127\050\124\051\126\052\123\053\130\054" +
    "\125\063\uffd2\065\uffd2\071\uffd2\072\uffd2\001\002\000\012" +
    "\063\uffd0\065\uffd0\071\uffd0\072\uffd0\001\002\000\042\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\047\127" +
    "\050\124\051\126\052\123\053\130\054\125\063\uffad\065" +
    "\uffad\071\uffad\072\uffad\001\002\000\046\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\060\ufffa\061\ufffa\063\ufffa" +
    "\065\ufffa\071\ufffa\072\ufffa\001\002\000\046\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\060\uffa8\061\uffa8\063" +
    "\uffa8\065\uffa8\071\uffa8\072\uffa8\001\002\000\046\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\060\uffac\061\uffac" +
    "\063\uffac\065\uffac\071\uffac\072\uffac\001\002\000\004\065" +
    "\137\001\002\000\046\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\060\ufff8\061\ufff8\063\ufff8\065\ufff8\071\ufff8" +
    "\072\ufff8\001\002\000\004\062\116\001\002\000\046\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\060\ufff9\061" +
    "\ufff9\063\ufff9\065\ufff9\071\ufff9\072\ufff9\001\002\000\046" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\060\ufffb" +
    "\061\ufffb\063\ufffb\065\ufffb\071\ufffb\072\ufffb\001\002\000" +
    "\046\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\060" +
    "\uffab\061\uffab\063\uffab\065\uffab\071\uffab\072\uffab\001\002" +
    "\000\012\063\uffd1\065\uffd1\071\uffd1\072\uffd1\001\002\000" +
    "\036\027\104\030\112\031\043\033\110\034\074\035\113" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\062" +
    "\060\064\072\001\002\000\046\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\060\uff94\061\uff94\063\uff94\065\uff94" +
    "\071\uff94\072\uff94\001\002\000\016\047\127\050\124\051" +
    "\126\052\123\053\130\054\125\001\002\000\046\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\047\127\050" +
    "\124\051\126\052\123\053\130\054\125\060\uff96\061\uff96" +
    "\063\uff96\065\uff96\071\uff96\072\uff96\001\002\000\016\060" +
    "\uff95\061\uff95\063\uff95\065\uff95\071\uff95\072\uff95\001\002" +
    "\000\036\027\uff9d\030\uff9d\031\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\071\uff9d\072\uff9d\001\002\000\036\027\uff9f\030\uff9f\031" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\071\uff9f\072\uff9f\001\002\000" +
    "\036\027\uff9b\030\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\071" +
    "\uff9b\072\uff9b\001\002\000\036\027\uff9e\030\uff9e\031\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\071\uff9e\072\uff9e\001\002\000\036" +
    "\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\071\uffa0" +
    "\072\uffa0\001\002\000\036\027\uff9c\030\uff9c\031\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\065\uff9c\071\uff9c\072\uff9c\001\002\000\004\031" +
    "\043\001\002\000\016\060\uffa1\061\uffa1\063\uffa1\065\uffa1" +
    "\071\uffa1\072\uffa1\001\002\000\036\027\104\030\112\031" +
    "\043\033\110\034\074\035\113\060\uffb6\061\uffb6\062\060" +
    "\063\uffb6\064\072\065\uffb6\071\uffb6\072\uffb6\001\002\000" +
    "\046\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\060" +
    "\uffad\061\uffad\063\uffad\065\uffad\071\uffad\072\uffad\001\002" +
    "\000\016\060\uffa3\061\uffa3\063\uffa3\065\uffa3\071\uffa3\072" +
    "\uffa3\001\002\000\046\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\060\uffaa\061\uffaa\063\uffaa\065\uffaa\071\uffaa" +
    "\072\uffaa\001\002\000\004\066\140\001\002\000\046\003" +
    "\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\031\uffe1\062\uffe1\067\uffe1\001\002\000\046" +
    "\003\056\007\024\011\055\013\065\014\063\015\062\016" +
    "\044\017\040\020\036\021\061\022\013\023\020\024\015" +
    "\025\011\026\016\031\043\062\060\067\142\001\002\000" +
    "\006\012\144\071\143\001\002\000\050\003\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\031\uffc9\062\uffc9\067\uffc9\001\002\000\004\066" +
    "\145\001\002\000\046\003\uffe1\007\uffe1\011\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\062\uffe1" +
    "\067\uffe1\001\002\000\046\003\056\007\024\011\055\013" +
    "\065\014\063\015\062\016\044\017\040\020\036\021\061" +
    "\022\013\023\020\024\015\025\011\026\016\031\043\062" +
    "\060\067\147\001\002\000\004\071\150\001\002\000\050" +
    "\003\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\031\uffc8\062\uffc8\067\uffc8\001" +
    "\002\000\036\027\104\030\112\031\043\033\110\034\074" +
    "\035\113\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\062\060\064\072\001\002\000\046\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\060\uff97\061\uff97\063\uff97" +
    "\065\uff97\071\uff97\072\uff97\001\002\000\046\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\047\127\050\124" +
    "\051\126\052\123\053\130\054\125\060\uff99\061\uff99\063" +
    "\uff99\065\uff99\071\uff99\072\uff99\001\002\000\016\060\uff98" +
    "\061\uff98\063\uff98\065\uff98\071\uff98\072\uff98\001\002\000" +
    "\022\027\104\030\112\031\043\033\110\034\074\035\113" +
    "\062\060\064\072\001\002\000\032\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\060\uffb7\061\uffb7\063\uffb7" +
    "\065\uffb7\071\uffb7\072\uffb7\001\002\000\022\027\104\030" +
    "\112\031\043\033\110\034\074\035\113\062\060\064\072" +
    "\001\002\000\022\027\104\030\112\031\043\033\110\034" +
    "\074\035\113\062\060\064\072\001\002\000\022\027\104" +
    "\030\112\031\043\033\110\034\074\035\113\062\060\064" +
    "\072\001\002\000\022\027\104\030\112\031\043\033\110" +
    "\034\074\035\113\062\060\064\072\001\002\000\022\027" +
    "\104\030\112\031\043\033\110\034\074\035\113\062\060" +
    "\064\072\001\002\000\046\036\160\037\162\040\161\041" +
    "\163\042\155\043\157\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\060\uffaf\061\uffaf\063\uffaf\065\uffaf\071" +
    "\uffaf\072\uffaf\001\002\000\032\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\060\uffb2\061\uffb2\063\uffb2\065" +
    "\uffb2\071\uffb2\072\uffb2\001\002\000\046\036\160\037\162" +
    "\040\161\041\163\042\155\043\157\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\060\uffaf\061\uffaf\063\uffaf" +
    "\065\uffaf\071\uffaf\072\uffaf\001\002\000\032\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\060\uffb4\061\uffb4" +
    "\063\uffb4\065\uffb4\071\uffb4\072\uffb4\001\002\000\046\036" +
    "\160\037\162\040\161\041\163\042\155\043\157\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\060\uffaf\061" +
    "\uffaf\063\uffaf\065\uffaf\071\uffaf\072\uffaf\001\002\000\032" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\060" +
    "\uffb3\061\uffb3\063\uffb3\065\uffb3\071\uffb3\072\uffb3\001\002" +
    "\000\046\036\160\037\162\040\161\041\163\042\155\043" +
    "\157\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\060\uffaf\061\uffaf\063\uffaf\065\uffaf\071\uffaf\072\uffaf\001" +
    "\002\000\032\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\060\uffb5\061\uffb5\063\uffb5\065\uffb5\071\uffb5\072" +
    "\uffb5\001\002\000\046\036\160\037\162\040\161\041\163" +
    "\042\155\043\157\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\060\uffaf\061\uffaf\063\uffaf\065\uffaf\071\uffaf" +
    "\072\uffaf\001\002\000\032\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\060\uffb0\061\uffb0\063\uffb0\065\uffb0" +
    "\071\uffb0\072\uffb0\001\002\000\046\036\160\037\162\040" +
    "\161\041\163\042\155\043\157\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\060\uffaf\061\uffaf\063\uffaf\065" +
    "\uffaf\071\uffaf\072\uffaf\001\002\000\032\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\060\uffb1\061\uffb1\063" +
    "\uffb1\065\uffb1\071\uffb1\072\uffb1\001\002\000\006\027\104" +
    "\030\112\001\002\000\016\060\uffa2\061\uffa2\063\uffa2\065" +
    "\uffa2\071\uffa2\072\uffa2\001\002\000\012\063\uff9a\065\uff9a" +
    "\071\uff9a\072\uff9a\001\002\000\004\062\210\001\002\000" +
    "\004\062\205\001\002\000\006\055\100\057\111\001\002" +
    "\000\016\060\203\061\204\063\uff91\065\uff91\071\uff91\072" +
    "\uff91\001\002\000\012\063\uff92\065\uff92\071\uff92\072\uff92" +
    "\001\002\000\006\055\100\057\111\001\002\000\016\060" +
    "\203\061\204\063\uff91\065\uff91\071\uff91\072\uff91\001\002" +
    "\000\012\063\uff93\065\uff93\071\uff93\072\uff93\001\002\000" +
    "\004\065\214\001\002\000\046\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\060\uffa9\061\uffa9\063\uffa9\065\uffa9" +
    "\071\uffa9\072\uffa9\001\002\000\004\031\043\001\002\000" +
    "\004\065\217\001\002\000\004\066\220\001\002\000\004" +
    "\010\221\001\002\000\004\062\227\001\002\000\006\010" +
    "\221\067\224\001\002\000\006\010\uff8f\067\uff8f\001\002" +
    "\000\004\071\226\001\002\000\006\010\uff90\067\uff90\001" +
    "\002\000\050\003\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\031\uffca\062\uffca" +
    "\067\uffca\001\002\000\044\027\104\030\112\031\043\033" +
    "\110\034\074\035\113\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\100\057\111\062\060\064\072\072" +
    "\uffb6\001\002\000\004\072\231\001\002\000\050\003\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\031\uffe1\062\uffe1\067\uffe1\001\002\000" +
    "\050\003\056\007\024\010\uff8e\011\055\013\065\014\063" +
    "\015\062\016\044\017\040\020\036\021\061\022\013\023" +
    "\020\024\015\025\011\026\016\031\043\062\060\067\uff8e" +
    "\001\002\000\006\031\043\063\uffc1\001\002\000\010\063" +
    "\uffc2\065\uffbf\070\257\001\002\000\004\065\252\001\002" +
    "\000\004\065\uffc4\001\002\000\004\063\240\001\002\000" +
    "\004\031\043\001\002\000\010\063\uffbf\065\uffbf\070\250" +
    "\001\002\000\006\063\243\065\uffc5\001\002\000\006\031" +
    "\043\065\uffbc\001\002\000\006\065\uffbd\070\246\001\002" +
    "\000\004\065\uffc6\001\002\000\044\027\104\030\112\031" +
    "\043\033\110\034\074\035\113\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\100\057\111\062\060\064" +
    "\072\065\uffb6\001\002\000\004\065\uffbe\001\002\000\046" +
    "\027\104\030\112\031\043\033\110\034\074\035\113\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\100" +
    "\057\111\062\060\063\uffb6\064\072\065\uffb6\001\002\000" +
    "\006\063\uffc0\065\uffc0\001\002\000\004\066\253\001\002" +
    "\000\046\003\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\031\uffe1\062\uffe1\067\uffe1\001" +
    "\002\000\046\003\056\007\024\011\055\013\065\014\063" +
    "\015\062\016\044\017\040\020\036\021\061\022\013\023" +
    "\020\024\015\025\011\026\016\031\043\062\060\067\255" +
    "\001\002\000\004\071\256\001\002\000\050\003\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\031\uffc7\062\uffc7\067\uffc7\001\002\000\046" +
    "\027\104\030\112\031\043\033\110\034\074\035\113\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\100" +
    "\057\111\062\060\063\uffb6\064\072\065\uffb6\001\002\000" +
    "\006\063\uffc3\065\uffc0\001\002\000\044\027\104\030\112" +
    "\031\043\033\110\034\074\035\113\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\100\057\111\062\060" +
    "\064\072\065\uffb6\001\002\000\004\065\263\001\002\000" +
    "\004\071\264\001\002\000\050\003\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\031\uffb8\062\uffb8\067\uffb8\001\002\000\004\064\266\001" +
    "\002\000\046\027\104\030\112\031\043\033\110\034\074" +
    "\035\113\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\100\057\111\062\060\063\uffb6\064\072\065\uffb6" +
    "\001\002\000\006\063\271\065\272\001\002\000\006\063" +
    "\uffa4\065\uffa4\001\002\000\046\027\104\030\112\031\043" +
    "\033\110\034\074\035\113\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\100\057\111\062\060\063\uffb6" +
    "\064\072\065\uffb6\001\002\000\046\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\060\uffa6\061\uffa6\063\uffa6\065" +
    "\uffa6\071\uffa6\072\uffa6\001\002\000\006\063\uffa5\065\uffa5" +
    "\001\002\000\004\031\043\001\002\000\006\070\277\071" +
    "\276\001\002\000\050\003\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\031\uffeb" +
    "\062\uffeb\067\uffeb\001\002\000\044\027\104\030\112\031" +
    "\043\033\110\034\074\035\113\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\100\057\111\062\060\064" +
    "\072\071\uffb6\001\002\000\004\071\301\001\002\000\050" +
    "\003\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\031\uffcf\062\uffcf\067\uffcf\001" +
    "\002\000\050\003\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\031\uffcb\062\uffcb" +
    "\067\uffcb\001\002\000\050\003\uffea\007\uffea\010\uffea\011" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\031" +
    "\uffea\062\uffea\067\uffea\001\002\000\044\027\104\030\112" +
    "\031\043\033\110\034\074\035\113\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\100\057\111\062\060" +
    "\064\072\065\uffb6\001\002\000\004\065\306\001\002\000" +
    "\004\066\307\001\002\000\046\003\uffe1\007\uffe1\011\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1" +
    "\062\uffe1\067\uffe1\001\002\000\046\003\056\007\024\011" +
    "\055\013\065\014\063\015\062\016\044\017\040\020\036" +
    "\021\061\022\013\023\020\024\015\025\011\026\016\031" +
    "\043\062\060\067\311\001\002\000\006\012\313\071\312" +
    "\001\002\000\050\003\uffcd\007\uffcd\010\uffcd\011\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\062" +
    "\uffcd\067\uffcd\001\002\000\004\066\314\001\002\000\046" +
    "\003\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\031\uffe1\062\uffe1\067\uffe1\001\002\000" +
    "\046\003\056\007\024\011\055\013\065\014\063\015\062" +
    "\016\044\017\040\020\036\021\061\022\013\023\020\024" +
    "\015\025\011\026\016\031\043\062\060\067\316\001\002" +
    "\000\004\071\317\001\002\000\050\003\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\031\uffcc\062\uffcc\067\uffcc\001\002\000\004\071\326" +
    "\001\002\000\004\071\325\001\002\000\044\027\104\030" +
    "\112\031\043\033\110\034\074\035\113\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\100\057\111\062" +
    "\060\064\072\071\uffb6\001\002\000\004\071\324\001\002" +
    "\000\050\003\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce\062\uffce\067" +
    "\uffce\001\002\000\050\003\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4" +
    "\062\uffd4\067\uffd4\001\002\000\050\003\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\031\uffd3\062\uffd3\067\uffd3\001\002\000\044\027\104" +
    "\030\112\031\043\033\110\034\074\035\113\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\100\057\111" +
    "\062\060\064\072\065\uffb6\001\002\000\004\065\331\001" +
    "\002\000\004\071\332\001\002\000\050\003\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\031\uffbb\062\uffbb\067\uffbb\001\002\000\050\003" +
    "\uffba\007\uffba\010\uffba\011\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\031\uffba\062\uffba\067\uffba\001\002" +
    "\000\050\003\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\031\uffd5\062\uffd5\067" +
    "\uffd5\001\002\000\004\031\043\001\002\000\004\065\337" +
    "\001\002\000\004\071\340\001\002\000\050\003\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\031\uffb9\062\uffb9\067\uffb9\001\002\000\004" +
    "\031\043\001\002\000\006\063\344\065\uffe6\001\002\000" +
    "\004\065\uffe9\001\002\000\014\022\013\023\020\024\015" +
    "\025\011\026\016\001\002\000\004\062\346\001\002\000" +
    "\004\031\043\001\002\000\006\063\344\065\uffe6\001\002" +
    "\000\004\065\uffe7\001\002\000\014\022\013\023\020\024" +
    "\015\025\011\026\016\001\002\000\004\062\353\001\002" +
    "\000\004\031\043\001\002\000\004\071\355\001\002\000" +
    "\050\003\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\031\uffec\062\uffec\067\uffec" +
    "\001\002\000\024\002\uffe3\003\ufff2\007\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\062\ufff2\001\002\000\004" +
    "\065\360\001\002\000\004\066\361\001\002\000\046\003" +
    "\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\031\uffe1\062\uffe1\067\uffe1\001\002\000\046" +
    "\003\056\007\024\011\055\013\065\014\063\015\062\016" +
    "\044\017\040\020\036\021\061\022\013\023\020\024\015" +
    "\025\011\026\016\031\043\062\060\067\363\001\002\000" +
    "\004\002\uffe4\001\002\000\004\031\043\001\002\000\004" +
    "\071\276\001\002\000\004\062\370\001\002\000\004\064" +
    "\uffe5\001\002\000\014\022\013\023\020\024\015\025\011" +
    "\026\016\001\002\000\004\062\372\001\002\000\004\031" +
    "\043\001\002\000\004\064\ufff5\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\003\003\064\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\007" +
    "\001\001\000\016\013\013\016\025\020\016\025\021\062" +
    "\024\063\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\030" +
    "\020\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\033\001\001\000\040\004\044" +
    "\020\056\021\051\022\040\023\066\025\052\037\053\040" +
    "\050\041\047\044\041\051\046\052\065\053\034\054\045" +
    "\060\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\102\005\105\006\113\007\075\011\104\024\106\026\100" +
    "\030\076\031\070\032\114\034\101\035\074\060\072\001" +
    "\001\000\002\001\001\000\034\004\102\005\105\006\113" +
    "\007\075\011\104\024\212\026\100\030\076\031\070\032" +
    "\114\034\101\035\074\060\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\201\001\001\000\004\033" +
    "\177\001\001\000\004\027\155\001\001\000\002\001\001" +
    "\000\004\033\132\001\001\000\002\001\001\000\004\033" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\120\005\105\006\113\007" +
    "\075\011\104\026\117\030\076\031\070\032\121\060\116" +
    "\001\001\000\002\001\001\000\004\033\132\001\001\000" +
    "\004\033\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\131\001\001" +
    "\000\002\001\001\000\024\004\133\005\105\006\113\007" +
    "\135\011\104\026\134\030\076\031\070\060\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\140\001\001\000\040\004\044" +
    "\020\056\021\051\022\040\023\066\025\052\037\053\040" +
    "\050\041\047\044\041\051\046\052\065\053\034\054\045" +
    "\060\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\145\001\001\000\040\004\044" +
    "\020\056\021\051\022\040\023\066\025\052\037\053\040" +
    "\050\041\047\044\041\051\046\052\065\053\034\054\045" +
    "\060\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\152\005\105\006\113\007\075\011\104\026\117" +
    "\030\076\031\070\032\153\060\151\001\001\000\002\001" +
    "\001\000\004\033\130\001\001\000\002\001\001\000\022" +
    "\004\133\005\105\006\113\007\135\011\104\030\175\031" +
    "\070\060\072\001\001\000\002\001\001\000\022\004\133" +
    "\005\105\006\113\007\135\011\104\030\173\031\070\060" +
    "\072\001\001\000\022\004\133\005\105\006\113\007\135" +
    "\011\104\030\171\031\070\060\072\001\001\000\022\004" +
    "\133\005\105\006\113\007\135\011\104\030\167\031\070" +
    "\060\072\001\001\000\022\004\133\005\105\006\113\007" +
    "\135\011\104\030\165\031\070\060\072\001\001\000\022" +
    "\004\133\005\105\006\113\007\135\011\104\030\163\031" +
    "\070\060\072\001\001\000\004\027\164\001\001\000\002" +
    "\001\001\000\004\027\166\001\001\000\002\001\001\000" +
    "\004\027\170\001\001\000\002\001\001\000\004\027\172" +
    "\001\001\000\002\001\001\000\004\027\174\001\001\000" +
    "\002\001\001\000\004\027\176\001\001\000\002\001\001" +
    "\000\004\007\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\205" +
    "\001\001\000\004\036\206\001\001\000\002\001\001\000" +
    "\004\035\210\001\001\000\004\036\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\221\043\222\001\001\000\002\001\001\000\004\043" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\102\005\105\006" +
    "\113\007\075\011\104\024\227\026\100\030\076\031\070" +
    "\032\114\034\101\035\074\060\072\001\001\000\002\001" +
    "\001\000\004\017\231\001\001\000\040\004\044\020\056" +
    "\021\051\022\040\023\066\025\052\037\053\040\050\041" +
    "\047\044\041\051\046\052\065\053\034\054\045\060\036" +
    "\001\001\000\012\004\233\045\234\046\236\047\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\240\047\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\243\050\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\102\005\105\006\113\007\075\011\104\024\246\026\100" +
    "\030\076\031\070\032\114\034\101\035\074\060\072\001" +
    "\001\000\002\001\001\000\034\004\102\005\105\006\113" +
    "\007\075\011\104\024\250\026\100\030\076\031\070\032" +
    "\114\034\101\035\074\060\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\253\001\001\000\040\004" +
    "\044\020\056\021\051\022\040\023\066\025\052\037\053" +
    "\040\050\041\047\044\041\051\046\052\065\053\034\054" +
    "\045\060\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\102\005\105\006\113\007\075\011\104\024" +
    "\257\026\100\030\076\031\070\032\114\034\101\035\074" +
    "\060\072\001\001\000\002\001\001\000\034\004\102\005" +
    "\105\006\113\007\075\011\104\024\261\026\100\030\076" +
    "\031\070\032\114\034\101\035\074\060\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\102\005\105\006\113\007\075\011" +
    "\104\024\267\026\100\030\076\031\070\032\114\034\101" +
    "\035\074\060\072\061\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\102\005\105\006\113\007\075" +
    "\011\104\024\272\026\100\030\076\031\070\032\114\034" +
    "\101\035\074\060\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\102\005\105\006\113\007\075" +
    "\011\104\024\277\026\100\030\076\031\070\032\114\034" +
    "\101\035\074\060\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\102\005\105\006\113\007\075\011\104\024\304\026\100" +
    "\030\076\031\070\032\114\034\101\035\074\060\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\307" +
    "\001\001\000\040\004\044\020\056\021\051\022\040\023" +
    "\066\025\052\037\053\040\050\041\047\044\041\051\046" +
    "\052\065\053\034\054\045\060\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\314" +
    "\001\001\000\040\004\044\020\056\021\051\022\040\023" +
    "\066\025\052\037\053\040\050\041\047\044\041\051\046" +
    "\052\065\053\034\054\045\060\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\102\005\105\006\113\007\075\011\104\024" +
    "\322\026\100\030\076\031\070\032\114\034\101\035\074" +
    "\060\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\102\005\105" +
    "\006\113\007\075\011\104\024\327\026\100\030\076\031" +
    "\070\032\114\034\101\035\074\060\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\341\001\001\000\004\015\342\001\001\000\002\001\001" +
    "\000\004\020\344\001\001\000\002\001\001\000\004\004" +
    "\346\001\001\000\004\015\347\001\001\000\002\001\001" +
    "\000\004\020\351\001\001\000\002\001\001\000\004\004" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\361\001\001\000\040\004\044\020\056\021\051\022\040" +
    "\023\066\025\052\037\053\040\050\041\047\044\041\051" +
    "\046\052\065\053\034\054\045\060\036\001\001\000\002" +
    "\001\001\000\004\004\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\370\001\001" +
    "\000\002\001\001\000\004\004\372\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer lex;
    
    public Sintax(Lexer lex){
        this.lex=lex;
    }

    public void syntax_error(Symbol s){
    System.out.println("Error de Sintaxis: Tipo: Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error de Sintaxis Tipo: No-Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) + "");
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    //Aquí debe ir la lista de tablas de símbolos
    
    HashMap<String, ArrayList<String> > listaTablaSimbolos = new HashMap<String, ArrayList<String> >();
    String currentHash = "globalTS";
    String globalHash = "globalTS"; 
    

   
    public void imprimirTablaSimbolos(){
        System.out.println("====== Imprimiendo Tabla de Símbolos ======");
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println(">>>Tabla de símbolos: " + key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
        }
    }


    public String verificarTipoVariable(String var){
        boolean palabraEncontrada = false;
        String[] partesTablaSimbolos = null;
        String res = "null";
        for (String elemento : listaTablaSimbolos.get(currentHash)) {
            if (elemento.contains(var.toString())) {              //Si el nombre de la variable está en el currentHash se activa la bandera
                palabraEncontrada = true;
                break;                                          // Sale si encuentra la palabra

            }
        }
        for (String elemento2 : listaTablaSimbolos.get(globalHash)) {
            if (elemento2.contains(var.toString())) {             //Si el nombre de la variable está en elglobalHash se activa la bandera
                palabraEncontrada = true;
                break;                                          // Sale si encuentra la palabra
            }

        }

        if (!palabraEncontrada ) {                                                          
            System.out.println("Error semántico: Variable no existe en el alcance: " + var.toString());
       }else {
            // Si el scope actual (currentHash) existe en la tabla de símbolos
            if (listaTablaSimbolos.containsKey(currentHash)) {
                ArrayList<String> contexto = listaTablaSimbolos.get(currentHash);

                // Buscar la variable en el contexto actual
                for (String entrada : contexto) {
                    if (entrada.contains("Nombre Identificador: " + var.toString())) {                                                                                                                                      
                        int tipoIndex = entrada.indexOf("Tipo: "); //Se extrae el tipo de dato de la variable
                        String tipoVariable = entrada.substring(tipoIndex + 6);  // 6 es la longitud de "Tipo: "
                        partesTablaSimbolos = tipoVariable.split(" ");
                        // Ahora tienes el tipo de la variable
                        System.out.println("El tipo de " + var.toString() + " es: " + partesTablaSimbolos[0]);
                        break;  // Sale del ciclo se encuentra la variable la variable
                    }
                }
            } 
            if (listaTablaSimbolos.containsKey(globalHash)) {
                ArrayList<String> contexto = listaTablaSimbolos.get(globalHash);

                // Buscar la variable en el contexto actual
                for (String entrada : contexto) {
                    if (entrada.contains("Nombre Identificador: " + var.toString())) {
                        // Encontraste la entrada de la variable
                        // Ahora extrae el tipo
                        int tipoIndex = entrada.indexOf("Tipo: ");
                        String tipoVariable = entrada.substring(tipoIndex + 6);  // 6 es la longitud de "Tipo: "
                        partesTablaSimbolos = tipoVariable.split(" ");    
                        // Ahora tienes el tipo de la variable
                        System.out.println("El tipo de " + var.toString() + " es: " + partesTablaSimbolos[0]);
                        break; // Sale del ciclo se encuentra la variable la variable
                    }
                }
            }
            else {
                System.out.println("Error: Contexto actual no encontrado en la tabla de símbolos");
            }
            res = " :" + partesTablaSimbolos[0];        
            }
         return res;   
    }

    public String verificarTipoExpresionAritmetica(String it, String c){
        String[] partesOperando1 = it.toString().split(":"); 
        String[] partesOperando2 = c.toString().substring(1).split(":");
        boolean flag = false;
        String tipoOperacion = "null";
        System.out.println("TipoParte1: " + partesOperando1[1] );
        System.out.println("TipoParte2: " + partesOperando2[1] );
        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
            flag = true;
        }
        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
            flag = true;
        }

        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
        }else{
              tipoOperacion = partesOperando1[1];

        }
        return tipoOperacion;
    }

    public String verificarTipoExpresionAritmeticaDiv(String it, String c){
        String[] partesOperando1 = it.toString().split(":"); 
        String[] partesOperando2 = c.toString().substring(1).split(":");
        boolean flag = false;
        String tipoOperacion = "null";
        System.out.println("TipoParte1: " + partesOperando1[1] );
        System.out.println("TipoParte2: " + partesOperando2[1] );
        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
            flag = true;
        }
        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
            flag = true;
        }
        if(partesOperando2[0].equals("0")){
            System.out.println("División entre cero encontrada. Revise el operando." );
            flag = true;
        }

        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
           System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
        }else{
              tipoOperacion = partesOperando1[1];     
        }
        return tipoOperacion;
    }









  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // caso_switch ::= SIAPARECE SPACEGATO encanto DOUBLEDOT conjuros 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(33/*caso_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // casos_switch ::= caso_switch 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(32/*casos_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(32/*casos_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cola_conjuro_logico ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cola_conjuro_logico ::= OR SPACEGATO conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cola_conjuro_logico ::= AND SPACEGATO conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // conjuro_logico ::= NOTC SPACEGATO invocacion_funcion 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // conjuro_logico ::= NOTC SPACEGATO conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // conjuro_logico ::= NOTC SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conjuro_logico ::= NOT SPACEGATO invocacion_funcion 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conjuro_logico ::= NOT SPACEGATO conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conjuro_logico ::= NOT SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ritual_logico ::= conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(26/*ritual_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // encantamiento_relacional ::= DIFF 
            {
              Object RESULT = null;
		 RESULT = "DIFF"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // encantamiento_relacional ::= EQEQ 
            {
              Object RESULT = null;
		 RESULT = "EQEQ"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // encantamiento_relacional ::= GREATEREQ 
            {
              Object RESULT = null;
		 RESULT = "GREATEREQ"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // encantamiento_relacional ::= GREATER 
            {
              Object RESULT = null;
		 RESULT = "GREATER"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // encantamiento_relacional ::= LESSEQ 
            {
              Object RESULT = null;
		 RESULT = "LESSEQ"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // encantamiento_relacional ::= LESS 
            {
              Object RESULT = null;
		 RESULT = "LESS"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conjuro_relacional ::= nombre_ingrediente encantamiento_relacional nombre_ingrediente 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		verificarTipoVariable(n1.toString());verificarTipoVariable(n2.toString());
              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // conjuro_relacional ::= SiNox encantamiento_relacional SiNox 
            {
              Object RESULT = null;
		System.out.println("Relacional es Bool");
              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // conjuro_relacional ::= conjuro_arcano encantamiento_relacional conjuro_arcano 
            {
              Object RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		System.out.println("C1 es:" + c1.toString() + "y C2 es: " + c2.toString());
              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // encantos ::= encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(47/*encantos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // encantos ::= encantos COMMA encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(47/*encantos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // invocacion_funcion ::= SPACEGATO nombre_ingrediente PARENL encantos PARENR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(46/*invocacion_funcion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // invocacion_factor ::= invocacion_funcion 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // invocacion_factor ::= Runas 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = r + ":Runas";            
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // invocacion_factor ::= PARENL encanto PARENR 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = e;                       
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // invocacion_factor ::= SiNox 
            {
              Object RESULT = null;
		int snleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object sn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = sn + ":SiNox";           
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // invocacion_factor ::= NumeraDecimus 
            {
              Object RESULT = null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = nd + ":NumeraDecimus";   
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // invocacion_factor ::= Numera 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = n  + ":Numera";          
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // invocacion_factor ::= nombre_ingrediente 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = verificarTipoVariable(n.toString()); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // invocacion_term ::= invocacion_factor 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = f; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(22/*invocacion_term*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conjuro_arcano_prima ::= 
            {
              Object RESULT = null;
		RESULT = "x:Empty"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // conjuro_arcano_prima ::= POW invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "^:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString()) ;
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conjuro_arcano_prima ::= MOD invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "%:"  + verificarTipoExpresionAritmeticaDiv(it.toString(),c.toString()) ;
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conjuro_arcano_prima ::= DIV invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "/:"  + verificarTipoExpresionAritmeticaDiv(it.toString(),c.toString()) ;
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conjuro_arcano_prima ::= MUL invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "*:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString()) ;
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conjuro_arcano_prima ::= MINUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "-:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString()); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conjuro_arcano_prima ::= PLUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "+:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString());  
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conjuro_arcano ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conjuro_arcano ::= invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		           
                                                                                        String[] partesOperando1 = it.toString().split(":"); 
                                                                                        String[] partesOperando2 = c.toString().substring(1).split(":");
                                                                                        boolean flag = false;
                                                                                        String tipoOperacion = "null";
                                                                                        System.out.println("TipoParte1: " + partesOperando1[1] );
                                                                                        System.out.println("TipoParte2: " + partesOperando2[1] );
                                                                                        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus")|| (partesOperando1[1].equals("SiNox") && partesOperando2[1].equals("Empty")) )){  //Si el tipo del primer operando no es int o float o no cumple que el primer operando sea un Bool y el segundo un Empty
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
                                                                                            flag = true;
                                                                                        }
                                                                                        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float o vacio
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
                                                                                            flag = true;
                                                                                        }

                                                                                        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
                                                                                            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
                                                                                        }else{
                                                                                              tipoOperacion = partesOperando1[1];
                                                                                              
                                                                                        }
                                                                                        
                                                                                        System.out.println("====>Tipo de la Operación Combinada: " + tipoOperacion);
                                                                                        RESULT = tipoOperacion ; 
                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conjuro_escribir ::= ESCRIBIO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(42/*conjuro_escribir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conjuro_leer ::= RECITA PARENL nombre_ingrediente PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(41/*conjuro_leer*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conjuro_confractus ::= CONFRACTA DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(40/*conjuro_confractus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conjuro_revertir ::= RIVIERTO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(39/*conjuro_revertir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paso ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paso ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paso ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fin ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(37/*fin*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fin ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(37/*fin*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inicio ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inicio ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inicio ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inicio_fin_paso ::= fin 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inicio_fin_paso ::= inicio COMMA fin 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inicio_fin_paso ::= inicio COMMA fin COMMA paso 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conjuro_para ::= PARARANGUS PARENL inicio_fin_paso PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(34/*conjuro_para*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conjuro_mientras ::= MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conjuro_mientras ::= MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conjuro_mutacion ::= MUTACION PARENL nombre_ingrediente PARENR KEYL casos_switch KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(31/*conjuro_mutacion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conjuro_si ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conjuro_si ::= SI PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conjuro_si ::= SI PARENL encanto PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enlace_encanto ::= nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(17/*enlace_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // invocacion_encanto ::= esencia SPACEGATO nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 listaTablaSimbolos.get(currentHash).add("Tipo: " + e.toString() + " Nombre Identificador: " + n.toString() ); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(16/*invocacion_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // encanto ::= ritual_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // encanto ::= conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // encanto ::= conjuro_arcano 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 System.out.println("Valor de Encanto= " + c); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conjuro ::= nombre_ingrediente MINUSMINUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conjuro ::= nombre_ingrediente PLUSPLUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conjuro ::= invocacion_funcion DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conjuro ::= conjuro_escribir 
            {
              Object RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conjuro ::= conjuro_leer 
            {
              Object RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conjuro ::= conjuro_confractus 
            {
              Object RESULT = null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conjuro ::= conjuro_revertir 
            {
              Object RESULT = null;
		int crleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int crright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // conjuro ::= conjuro_para 
            {
              Object RESULT = null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conjuro ::= conjuro_mientras 
            {
              Object RESULT = null;
		int cmileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cmiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cmi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conjuro ::= conjuro_mutacion 
            {
              Object RESULT = null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conjuro ::= conjuro_si 
            {
              Object RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conjuro ::= enlace_encanto 
            {
              Object RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conjuro ::= invocacion_encanto 
            {
              Object RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conjuro ::= creacion_ingredientes 
            {
              Object RESULT = null;
		int Cileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int Ciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object Ci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conjuros ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conjuros ::= conjuros conjuro 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // hechizo_principal ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*hechizo_principal*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // hechizo_principal ::= hechizo_principal_encabezado PARENL PARENR KEYL conjuros KEYR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*hechizo_principal*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // hechizo_principal_encabezado ::= SPACEGATO HECHIZOPRINCIPAL 
            {
              Object RESULT = null;
		
                                                                                                    //System.out.println("Inicio de Main + n.toString()");
                                                                                                    ArrayList<String> lista = new ArrayList<String>();
                                                                                                    currentHash = "Main";
                                                                                                    String tipoTabla = "Main";
                                                                                                    lista.add(tipoTabla);
                                                                                                    listaTablaSimbolos.put(currentHash, lista);
                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(49/*hechizo_principal_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ritual_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ritual_ingredientes ::= COMMA esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_ingredientes ::= esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // creacion_ingredientes ::= error DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // creacion_ingredientes ::= esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 listaTablaSimbolos.get(currentHash).add("Tipo: " +  e.toString() + " Nombre Identificador: " + n.toString() ); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // creacion_ingredientes ::= GLOBALIO SPACEGATO esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 listaTablaSimbolos.get(currentHash).add("Tipo: "  + e.toString() + " Nombre Identificador: " + n.toString()); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // esencia ::= RUNAS 
            {
              Object RESULT = null;
		RESULT = "Runas"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // esencia ::= RUNA 
            {
              Object RESULT = null;
		RESULT = "Runa"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // esencia ::= SINOX 
            {
              Object RESULT = null;
		RESULT = "SiNox"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // esencia ::= NUMERADECIMUS 
            {
              Object RESULT = null;
		RESULT = "NumeraDecimus"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // esencia ::= NUMERA 
            {
              Object RESULT = null;
		RESULT = "Numera"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // hechizo ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // hechizo ::= creacion_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // hechizo ::= hechizo_encabezado PARENL lista_ingredientes PARENR KEYL conjuros KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // hechizo_encabezado ::= SPACEGATO HECHIZO SPACEGATO esencia SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		
                                                                                                 //System.out.println("Inicio de Función + n.toString()");
                                                                                                ArrayList<String> lista = new ArrayList<String>();
                                                                                                currentHash = n.toString();
                                                                                                String tipoTabla = "Funcion";
                                                                                                lista.add(tipoTabla);
                                                                                                listaTablaSimbolos.put(currentHash, lista);
                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(48/*hechizo_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // hechizos ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // hechizos ::= hechizos hechizo 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Runas ::= STRING_LITERAL 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = s; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*Runas*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SiNox ::= FALSE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = t; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SiNox ::= TRUE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NumeraDecimus ::= NUMERADECIMUSLITERAL 
            {
              Object RESULT = null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = nd; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*NumeraDecimus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Numera ::= NUMERALITERAL 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = n; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*Numera*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nombre_ingrediente ::= NOMBREINGREDIENTE 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = n; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*nombre_ingrediente*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encantamiento ::= error 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*encantamiento*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encantamiento ::= NT$0 ABRACADABRA hechizos hechizo_principal 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		imprimirTablaSimbolos(); System.out.println("-=-=-=-=- fin de ejecución -=-=-=-=-");
              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*encantamiento*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT = null;

                        //System.out.println("Inicio programa\n");
                        ArrayList<String> lista = new ArrayList<String>();
                        String tipoTabla = "Globales";
                        lista.add(tipoTabla);
                        listaTablaSimbolos.put(currentHash, lista);
                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(50/*NT$0*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= encantamiento EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

