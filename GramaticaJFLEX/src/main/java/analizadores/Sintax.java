
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Oct 19 22:49:55 CST 2023
//----------------------------------------------------

package analizadores;

import java.util.*;
import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Thu Oct 19 22:49:55 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\003\005\000\002\003" +
    "\003\000\002\004\003\000\002\005\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\011\003\000" +
    "\002\012\004\000\002\012\002\000\002\013\016\000\002" +
    "\013\003\000\002\013\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\025\010\000\002\025\006\000\002\025\004\000" +
    "\002\014\006\000\002\014\002\000\002\015\007\000\002" +
    "\015\002\000\002\016\010\000\002\016\004\000\002\017" +
    "\004\000\002\017\002\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\004\000\002\021\005\000\002\021\005\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\022\010\000" +
    "\002\023\006\000\002\037\012\000\002\037\016\000\002" +
    "\037\004\000\002\041\012\000\002\040\012\000\002\040" +
    "\016\000\002\044\012\000\002\045\007\000\002\045\005" +
    "\000\002\045\003\000\002\046\005\000\002\046\003\000" +
    "\002\046\002\000\002\047\005\000\002\047\003\000\002" +
    "\050\005\000\002\050\003\000\002\050\002\000\002\051" +
    "\007\000\002\052\004\000\002\053\007\000\002\054\007" +
    "\000\002\026\004\000\002\026\002\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\002\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\005\000\002\031\003\000" +
    "\002\031\003\000\002\060\007\000\002\061\005\000\002" +
    "\061\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\034\004\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\036\006\000\002\036" +
    "\006\000\002\036\002\000\002\042\004\000\002\042\003" +
    "\000\002\043\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\006\003\005\004\006\001\002\000\004\002" +
    "\363\001\002\000\004\002\uffff\001\002\000\024\003\ufff7" +
    "\006\ufff7\007\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\062\ufff7\001\002\000\024\003\022\006\014\007\023" +
    "\022\012\023\020\024\015\025\010\026\016\062\011\001" +
    "\002\000\004\062\ufff0\001\002\000\004\005\337\001\002" +
    "\000\004\062\ufff3\001\002\000\024\003\ufff8\006\ufff8\007" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\062\ufff8" +
    "\001\002\000\004\064\040\001\002\000\004\062\ufff1\001" +
    "\002\000\004\062\uffef\001\002\000\004\062\035\001\002" +
    "\000\004\062\ufff2\001\002\000\024\003\ufff5\006\ufff5\007" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\062\ufff5" +
    "\001\002\000\006\067\033\071\034\001\002\000\004\062" +
    "\025\001\002\000\004\002\000\001\002\000\014\022\012" +
    "\023\020\024\015\025\010\026\016\001\002\000\004\062" +
    "\027\001\002\000\004\031\031\001\002\000\004\071\032" +
    "\001\002\000\056\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\060\ufffe\061\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\070\ufffe\071\ufffe\072\ufffe\001\002\000\052" +
    "\003\uffee\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\031\uffee\062\uffee\067" +
    "\uffee\001\002\000\026\002\uffe6\003\ufff4\006\ufff4\007\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\062\ufff4\001" +
    "\002\000\052\003\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\031\uffec" +
    "\062\uffec\067\uffec\001\002\000\004\031\031\001\002\000" +
    "\004\071\037\001\002\000\052\003\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\031\uffed\062\uffed\067\uffed\001\002\000\004\065" +
    "\041\001\002\000\004\066\042\001\002\000\046\003\uffe4" +
    "\007\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\031\uffe4\062\uffe4\067\uffe4\001\002\000\046\003" +
    "\064\007\023\011\063\013\072\014\071\015\070\016\052" +
    "\017\047\020\045\021\067\022\012\023\020\024\015\025" +
    "\010\026\016\031\031\062\066\067\073\001\002\000\050" +
    "\003\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\031\uffda\062\uffda\067\uffda\001" +
    "\002\000\004\064\333\001\002\000\004\071\332\001\002" +
    "\000\004\071\331\001\002\000\050\003\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\031\uffe2\062\uffe2\067\uffe2\001\002\000\050\003\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\031\uffdd\062\uffdd\067\uffdd\001\002\000" +
    "\004\064\325\001\002\000\010\045\317\046\316\070\320" +
    "\001\002\000\050\003\uffd9\007\uffd9\010\uffd9\011\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\062" +
    "\uffd9\067\uffd9\001\002\000\050\003\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\031\uffdc\062\uffdc\067\uffdc\001\002\000\050\003\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\031\uffdf\062\uffdf\067\uffdf\001\002\000\050" +
    "\003\uffde\007\uffde\010\uffde\011\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\031\uffde\062\uffde\067\uffde\001" +
    "\002\000\050\003\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\031\uffe5\062\uffe5" +
    "\067\uffe5\001\002\000\050\003\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\031" +
    "\uffe3\062\uffe3\067\uffe3\001\002\000\050\003\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\031\uffe0\062\uffe0\067\uffe0\001\002\000\004\064" +
    "\302\001\002\000\006\067\301\071\034\001\002\000\004" +
    "\062\274\001\002\000\004\031\031\001\002\000\004\064" +
    "\261\001\002\000\004\064\233\001\002\000\004\064\215" +
    "\001\002\000\004\064\076\001\002\000\004\002\uffe7\001" +
    "\002\000\050\003\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\031\uffdb\062\uffdb" +
    "\067\uffdb\001\002\000\050\003\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031" +
    "\uffe1\062\uffe1\067\uffe1\001\002\000\044\027\112\030\120" +
    "\031\031\033\115\034\102\035\121\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\106\057\117\062\066" +
    "\064\100\065\uffb9\001\002\000\046\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\060\uffb1\061\uffb1\063\uffb1\065" +
    "\uffb1\071\uffb1\072\uffb1\001\002\000\044\027\112\030\120" +
    "\031\031\033\115\034\102\035\121\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\106\057\117\062\066" +
    "\064\100\065\uffb9\001\002\000\046\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\060\uffaa\061\uffaa\063\uffaa\065" +
    "\uffaa\071\uffaa\072\uffaa\001\002\000\046\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\060\ufffd\061\ufffd\063\ufffd" +
    "\065\ufffd\071\ufffd\072\ufffd\001\002\000\016\060\203\061" +
    "\204\063\uff96\065\uff96\071\uff96\072\uff96\001\002\000\046" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\060\uffad" +
    "\061\uffad\063\uffad\065\uffad\071\uffad\072\uffad\001\002\000" +
    "\046\036\162\037\164\040\163\041\165\042\157\043\161" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\060" +
    "\uffb2\061\uffb2\063\uffb2\065\uffb2\071\uffb2\072\uffb2\001\002" +
    "\000\004\062\153\001\002\000\026\047\135\050\133\051" +
    "\134\052\131\053\137\054\132\063\uffd5\065\uffd5\071\uffd5" +
    "\072\uffd5\001\002\000\012\063\uffd3\065\uffd3\071\uffd3\072" +
    "\uffd3\001\002\000\046\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\060\uffb0\061\uffb0\063\uffb0\065\uffb0\071\uffb0" +
    "\072\uffb0\001\002\000\046\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\060\ufffb\061\ufffb\063\ufffb\065\ufffb\071" +
    "\ufffb\072\ufffb\001\002\000\046\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\060\uffab\061\uffab\063\uffab\065\uffab" +
    "\071\uffab\072\uffab\001\002\000\046\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\060\uffaf\061\uffaf\063\uffaf\065" +
    "\uffaf\071\uffaf\072\uffaf\001\002\000\046\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\060\ufff9\061\ufff9\063\ufff9" +
    "\065\ufff9\071\ufff9\072\ufff9\001\002\000\004\065\141\001" +
    "\002\000\004\062\124\001\002\000\046\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\060\ufffa\061\ufffa\063\ufffa" +
    "\065\ufffa\071\ufffa\072\ufffa\001\002\000\046\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\060\ufffc\061\ufffc\063" +
    "\ufffc\065\ufffc\071\ufffc\072\ufffc\001\002\000\046\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\060\uffae\061\uffae" +
    "\063\uffae\065\uffae\071\uffae\072\uffae\001\002\000\012\063" +
    "\uffd4\065\uffd4\071\uffd4\072\uffd4\001\002\000\036\027\112" +
    "\030\120\031\031\033\115\034\102\035\121\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\062\066\064\100" +
    "\001\002\000\046\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\060\uff99\061\uff99\063\uff99\065\uff99\071\uff99\072" +
    "\uff99\001\002\000\016\047\135\050\133\051\134\052\131" +
    "\053\137\054\132\001\002\000\046\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\060\uff9b\061\uff9b\063\uff9b\065" +
    "\uff9b\071\uff9b\072\uff9b\001\002\000\016\060\uff9a\061\uff9a" +
    "\063\uff9a\065\uff9a\071\uff9a\072\uff9a\001\002\000\036\027" +
    "\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\071\uffa2\072" +
    "\uffa2\001\002\000\036\027\uffa0\030\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\071\uffa0\072\uffa0\001\002\000\036\027\uffa4" +
    "\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\071\uffa4\072\uffa4" +
    "\001\002\000\036\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\071\uffa3\072\uffa3\001\002\000\036\027\uffa5\030" +
    "\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\071\uffa5\072\uffa5\001" +
    "\002\000\036\027\112\030\120\031\031\033\115\034\102" +
    "\035\121\060\uffb9\061\uffb9\062\066\063\uffb9\064\100\065" +
    "\uffb9\071\uffb9\072\uffb9\001\002\000\036\027\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\034\uffa1\035\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\071\uffa1\072\uffa1\001\002" +
    "\000\016\060\uffa6\061\uffa6\063\uffa6\065\uffa6\071\uffa6\072" +
    "\uffa6\001\002\000\004\066\142\001\002\000\046\003\uffe4" +
    "\007\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\031\uffe4\062\uffe4\067\uffe4\001\002\000\046\003" +
    "\064\007\023\011\063\013\072\014\071\015\070\016\052" +
    "\017\047\020\045\021\067\022\012\023\020\024\015\025" +
    "\010\026\016\031\031\062\066\067\144\001\002\000\006" +
    "\012\146\071\145\001\002\000\050\003\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\031\uffcc\062\uffcc\067\uffcc\001\002\000\004\066\147" +
    "\001\002\000\046\003\uffe4\007\uffe4\011\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\031\uffe4\062\uffe4\067" +
    "\uffe4\001\002\000\046\003\064\007\023\011\063\013\072" +
    "\014\071\015\070\016\052\017\047\020\045\021\067\022" +
    "\012\023\020\024\015\025\010\026\016\031\031\062\066" +
    "\067\151\001\002\000\004\071\152\001\002\000\050\003" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\031\uffcb\062\uffcb\067\uffcb\001\002" +
    "\000\036\027\112\030\120\031\031\033\115\034\102\035" +
    "\121\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\062\066\064\100\001\002\000\046\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\060\uff9c\061\uff9c\063\uff9c\065" +
    "\uff9c\071\uff9c\072\uff9c\001\002\000\046\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\060\uff9e\061\uff9e\063\uff9e" +
    "\065\uff9e\071\uff9e\072\uff9e\001\002\000\016\060\uff9d\061" +
    "\uff9d\063\uff9d\065\uff9d\071\uff9d\072\uff9d\001\002\000\022" +
    "\027\112\030\120\031\031\033\115\034\102\035\121\062" +
    "\066\064\100\001\002\000\032\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\060\uffba\061\uffba\063\uffba\065" +
    "\uffba\071\uffba\072\uffba\001\002\000\022\027\112\030\120" +
    "\031\031\033\115\034\102\035\121\062\066\064\100\001" +
    "\002\000\022\027\112\030\120\031\031\033\115\034\102" +
    "\035\121\062\066\064\100\001\002\000\022\027\112\030" +
    "\120\031\031\033\115\034\102\035\121\062\066\064\100" +
    "\001\002\000\022\027\112\030\120\031\031\033\115\034" +
    "\102\035\121\062\066\064\100\001\002\000\022\027\112" +
    "\030\120\031\031\033\115\034\102\035\121\062\066\064" +
    "\100\001\002\000\046\036\162\037\164\040\163\041\165" +
    "\042\157\043\161\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\060\uffb2\061\uffb2\063\uffb2\065\uffb2\071\uffb2" +
    "\072\uffb2\001\002\000\032\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\060\uffb5\061\uffb5\063\uffb5\065\uffb5" +
    "\071\uffb5\072\uffb5\001\002\000\046\036\162\037\164\040" +
    "\163\041\165\042\157\043\161\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\060\uffb2\061\uffb2\063\uffb2\065" +
    "\uffb2\071\uffb2\072\uffb2\001\002\000\032\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\060\uffb7\061\uffb7\063" +
    "\uffb7\065\uffb7\071\uffb7\072\uffb7\001\002\000\046\036\162" +
    "\037\164\040\163\041\165\042\157\043\161\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\060\uffb2\061\uffb2" +
    "\063\uffb2\065\uffb2\071\uffb2\072\uffb2\001\002\000\032\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\060\uffb6" +
    "\061\uffb6\063\uffb6\065\uffb6\071\uffb6\072\uffb6\001\002\000" +
    "\046\036\162\037\164\040\163\041\165\042\157\043\161" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\060" +
    "\uffb2\061\uffb2\063\uffb2\065\uffb2\071\uffb2\072\uffb2\001\002" +
    "\000\032\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\060\uffb8\061\uffb8\063\uffb8\065\uffb8\071\uffb8\072\uffb8" +
    "\001\002\000\046\036\162\037\164\040\163\041\165\042" +
    "\157\043\161\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\060\uffb2\061\uffb2\063\uffb2\065\uffb2\071\uffb2\072" +
    "\uffb2\001\002\000\032\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\060\uffb3\061\uffb3\063\uffb3\065\uffb3\071" +
    "\uffb3\072\uffb3\001\002\000\046\036\162\037\164\040\163" +
    "\041\165\042\157\043\161\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\060\uffb2\061\uffb2\063\uffb2\065\uffb2" +
    "\071\uffb2\072\uffb2\001\002\000\032\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\060\uffb4\061\uffb4\063\uffb4" +
    "\065\uffb4\071\uffb4\072\uffb4\001\002\000\012\063\uff9f\065" +
    "\uff9f\071\uff9f\072\uff9f\001\002\000\004\062\210\001\002" +
    "\000\004\062\205\001\002\000\006\055\106\057\117\001" +
    "\002\000\016\060\203\061\204\063\uff96\065\uff96\071\uff96" +
    "\072\uff96\001\002\000\012\063\uff97\065\uff97\071\uff97\072" +
    "\uff97\001\002\000\006\055\106\057\117\001\002\000\016" +
    "\060\203\061\204\063\uff96\065\uff96\071\uff96\072\uff96\001" +
    "\002\000\012\063\uff98\065\uff98\071\uff98\072\uff98\001\002" +
    "\000\004\065\214\001\002\000\046\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\060\uffac\061\uffac\063\uffac\065" +
    "\uffac\071\uffac\072\uffac\001\002\000\004\031\031\001\002" +
    "\000\004\065\217\001\002\000\004\066\220\001\002\000" +
    "\004\010\221\001\002\000\004\062\227\001\002\000\006" +
    "\010\221\067\224\001\002\000\006\010\uff94\067\uff94\001" +
    "\002\000\004\071\226\001\002\000\006\010\uff95\067\uff95" +
    "\001\002\000\050\003\uffcd\007\uffcd\010\uffcd\011\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\062" +
    "\uffcd\067\uffcd\001\002\000\044\027\112\030\120\031\031" +
    "\033\115\034\102\035\121\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\106\057\117\062\066\064\100" +
    "\072\uffb9\001\002\000\004\072\231\001\002\000\050\003" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\031\uffe4\062\uffe4\067\uffe4\001\002" +
    "\000\050\003\064\007\023\010\uff93\011\063\013\072\014" +
    "\071\015\070\016\052\017\047\020\045\021\067\022\012" +
    "\023\020\024\015\025\010\026\016\031\031\062\066\067" +
    "\uff93\001\002\000\006\031\031\063\uffc4\001\002\000\010" +
    "\063\uffc5\065\uffc2\070\257\001\002\000\004\065\252\001" +
    "\002\000\004\065\uffc7\001\002\000\004\063\240\001\002" +
    "\000\004\031\031\001\002\000\010\063\uffc2\065\uffc2\070" +
    "\250\001\002\000\006\063\243\065\uffc8\001\002\000\006" +
    "\031\031\065\uffbf\001\002\000\006\065\uffc0\070\246\001" +
    "\002\000\004\065\uffc9\001\002\000\044\027\112\030\120" +
    "\031\031\033\115\034\102\035\121\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\106\057\117\062\066" +
    "\064\100\065\uffb9\001\002\000\004\065\uffc1\001\002\000" +
    "\046\027\112\030\120\031\031\033\115\034\102\035\121" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\106\057\117\062\066\063\uffb9\064\100\065\uffb9\001\002" +
    "\000\006\063\uffc3\065\uffc3\001\002\000\004\066\253\001" +
    "\002\000\046\003\uffe4\007\uffe4\011\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\031\uffe4\062\uffe4\067\uffe4" +
    "\001\002\000\046\003\064\007\023\011\063\013\072\014" +
    "\071\015\070\016\052\017\047\020\045\021\067\022\012" +
    "\023\020\024\015\025\010\026\016\031\031\062\066\067" +
    "\255\001\002\000\004\071\256\001\002\000\050\003\uffca" +
    "\007\uffca\010\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\031\uffca\062\uffca\067\uffca\001\002\000" +
    "\046\027\112\030\120\031\031\033\115\034\102\035\121" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\106\057\117\062\066\063\uffb9\064\100\065\uffb9\001\002" +
    "\000\006\063\uffc6\065\uffc3\001\002\000\044\027\112\030" +
    "\120\031\031\033\115\034\102\035\121\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\106\057\117\062" +
    "\066\064\100\065\uffb9\001\002\000\004\065\263\001\002" +
    "\000\004\071\264\001\002\000\050\003\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\031\uffbb\062\uffbb\067\uffbb\001\002\000\004\064\266" +
    "\001\002\000\046\027\112\030\120\031\031\033\115\034" +
    "\102\035\121\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\106\057\117\062\066\063\uffb9\064\100\065" +
    "\uffb9\001\002\000\006\063\271\065\272\001\002\000\006" +
    "\063\uffa7\065\uffa7\001\002\000\046\027\112\030\120\031" +
    "\031\033\115\034\102\035\121\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\106\057\117\062\066\063" +
    "\uffb9\064\100\065\uffb9\001\002\000\046\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\060\uffa9\061\uffa9\063\uffa9" +
    "\065\uffa9\071\uffa9\072\uffa9\001\002\000\006\063\uffa8\065" +
    "\uffa8\001\002\000\004\031\031\001\002\000\006\070\276" +
    "\071\037\001\002\000\044\027\112\030\120\031\031\033" +
    "\115\034\102\035\121\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\106\057\117\062\066\064\100\071" +
    "\uffb9\001\002\000\004\071\300\001\002\000\050\003\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\031\uffd2\062\uffd2\067\uffd2\001\002\000" +
    "\050\003\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\031\uffce\062\uffce\067\uffce" +
    "\001\002\000\044\027\112\030\120\031\031\033\115\034" +
    "\102\035\121\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\106\057\117\062\066\064\100\065\uffb9\001" +
    "\002\000\004\065\304\001\002\000\004\066\305\001\002" +
    "\000\046\003\uffe4\007\uffe4\011\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\031\uffe4\062\uffe4\067\uffe4\001" +
    "\002\000\046\003\064\007\023\011\063\013\072\014\071" +
    "\015\070\016\052\017\047\020\045\021\067\022\012\023" +
    "\020\024\015\025\010\026\016\031\031\062\066\067\307" +
    "\001\002\000\006\012\311\071\310\001\002\000\050\003" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\031\uffd0\062\uffd0\067\uffd0\001\002" +
    "\000\004\066\312\001\002\000\046\003\uffe4\007\uffe4\011" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\031" +
    "\uffe4\062\uffe4\067\uffe4\001\002\000\046\003\064\007\023" +
    "\011\063\013\072\014\071\015\070\016\052\017\047\020" +
    "\045\021\067\022\012\023\020\024\015\025\010\026\016" +
    "\031\031\062\066\067\314\001\002\000\004\071\315\001" +
    "\002\000\050\003\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf\062\uffcf" +
    "\067\uffcf\001\002\000\004\071\324\001\002\000\004\071" +
    "\323\001\002\000\044\027\112\030\120\031\031\033\115" +
    "\034\102\035\121\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\106\057\117\062\066\064\100\071\uffb9" +
    "\001\002\000\004\071\322\001\002\000\050\003\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\031\uffd1\062\uffd1\067\uffd1\001\002\000\050" +
    "\003\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\031\uffd7\062\uffd7\067\uffd7\001" +
    "\002\000\050\003\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\062\uffd6" +
    "\067\uffd6\001\002\000\044\027\112\030\120\031\031\033" +
    "\115\034\102\035\121\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\106\057\117\062\066\064\100\065" +
    "\uffb9\001\002\000\004\065\327\001\002\000\004\071\330" +
    "\001\002\000\050\003\uffbe\007\uffbe\010\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\031\uffbe\062" +
    "\uffbe\067\uffbe\001\002\000\050\003\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\031\uffbd\062\uffbd\067\uffbd\001\002\000\050\003\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\031\uffd8\062\uffd8\067\uffd8\001\002\000\004" +
    "\031\031\001\002\000\004\065\335\001\002\000\004\071" +
    "\336\001\002\000\050\003\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\031\uffbc" +
    "\062\uffbc\067\uffbc\001\002\000\004\062\340\001\002\000" +
    "\014\022\012\023\020\024\015\025\010\026\016\001\002" +
    "\000\004\062\342\001\002\000\004\031\031\001\002\000" +
    "\004\064\344\001\002\000\016\022\012\023\020\024\015" +
    "\025\010\026\016\065\uffea\001\002\000\004\062\353\001" +
    "\002\000\004\065\347\001\002\000\004\066\350\001\002" +
    "\000\046\003\uffe4\007\uffe4\011\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\031\uffe4\062\uffe4\067\uffe4\001" +
    "\002\000\046\003\064\007\023\011\063\013\072\014\071" +
    "\015\070\016\052\017\047\020\045\021\067\022\012\023" +
    "\020\024\015\025\010\026\016\031\031\062\066\067\352" +
    "\001\002\000\024\003\ufff6\006\ufff6\007\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\062\ufff6\001\002\000\004" +
    "\031\031\001\002\000\006\063\356\065\uffe8\001\002\000" +
    "\004\065\uffeb\001\002\000\014\022\012\023\020\024\015" +
    "\025\010\026\016\001\002\000\004\062\360\001\002\000" +
    "\004\031\031\001\002\000\006\063\356\065\uffe8\001\002" +
    "\000\004\065\uffe9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\006\001\001\000\012\013\012" +
    "\016\023\020\016\025\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\025\001" +
    "\001\000\002\001\001\000\004\004\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\042\001\001\000\040\004\052\020\064" +
    "\021\057\022\047\023\074\025\060\037\061\040\056\041" +
    "\055\044\050\051\054\052\073\053\043\054\053\060\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\110\005\113\006\121\007" +
    "\103\011\112\024\115\026\106\030\104\031\076\032\122" +
    "\034\107\035\102\060\100\001\001\000\002\001\001\000" +
    "\034\004\110\005\113\006\121\007\103\011\112\024\212" +
    "\026\106\030\104\031\076\032\122\034\107\035\102\060" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\201\001\001\000\002\001\001\000\004\027\157\001" +
    "\001\000\002\001\001\000\004\033\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\126\005\113" +
    "\006\121\007\103\011\112\026\125\030\104\031\076\032" +
    "\127\060\124\001\001\000\002\001\001\000\004\033\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\110\005\113\006\121\007" +
    "\103\011\112\026\137\030\104\031\076\060\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\142\001\001\000\040\004\052\020\064\021\057" +
    "\022\047\023\074\025\060\037\061\040\056\041\055\044" +
    "\050\051\054\052\073\053\043\054\053\060\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\147\001\001\000\040\004\052\020\064\021\057" +
    "\022\047\023\074\025\060\037\061\040\056\041\055\044" +
    "\050\051\054\052\073\053\043\054\053\060\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\154\005" +
    "\113\006\121\007\103\011\112\026\125\030\104\031\076" +
    "\032\155\060\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\110\005\113\006\121" +
    "\007\103\011\112\030\177\031\076\060\100\001\001\000" +
    "\002\001\001\000\022\004\110\005\113\006\121\007\103" +
    "\011\112\030\175\031\076\060\100\001\001\000\022\004" +
    "\110\005\113\006\121\007\103\011\112\030\173\031\076" +
    "\060\100\001\001\000\022\004\110\005\113\006\121\007" +
    "\103\011\112\030\171\031\076\060\100\001\001\000\022" +
    "\004\110\005\113\006\121\007\103\011\112\030\167\031" +
    "\076\060\100\001\001\000\022\004\110\005\113\006\121" +
    "\007\103\011\112\030\165\031\076\060\100\001\001\000" +
    "\004\027\166\001\001\000\002\001\001\000\004\027\170" +
    "\001\001\000\002\001\001\000\004\027\172\001\001\000" +
    "\002\001\001\000\004\027\174\001\001\000\002\001\001" +
    "\000\004\027\176\001\001\000\002\001\001\000\004\027" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\205\001\001\000" +
    "\004\036\206\001\001\000\002\001\001\000\004\035\210" +
    "\001\001\000\004\036\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\221\043" +
    "\222\001\001\000\002\001\001\000\004\043\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\110\005\113\006\121\007\103" +
    "\011\112\024\227\026\106\030\104\031\076\032\122\034" +
    "\107\035\102\060\100\001\001\000\002\001\001\000\004" +
    "\017\231\001\001\000\040\004\052\020\064\021\057\022" +
    "\047\023\074\025\060\037\061\040\056\041\055\044\050" +
    "\051\054\052\073\053\043\054\053\060\045\001\001\000" +
    "\012\004\233\045\234\046\236\047\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\240\047\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\243\050\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\110\005\113" +
    "\006\121\007\103\011\112\024\246\026\106\030\104\031" +
    "\076\032\122\034\107\035\102\060\100\001\001\000\002" +
    "\001\001\000\034\004\110\005\113\006\121\007\103\011" +
    "\112\024\250\026\106\030\104\031\076\032\122\034\107" +
    "\035\102\060\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\253\001\001\000\040\004\052\020\064" +
    "\021\057\022\047\023\074\025\060\037\061\040\056\041" +
    "\055\044\050\051\054\052\073\053\043\054\053\060\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\110\005\113\006\121\007\103\011\112\024\257\026\106" +
    "\030\104\031\076\032\122\034\107\035\102\060\100\001" +
    "\001\000\002\001\001\000\034\004\110\005\113\006\121" +
    "\007\103\011\112\024\261\026\106\030\104\031\076\032" +
    "\122\034\107\035\102\060\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\110\005\113\006\121\007\103\011\112\024\267" +
    "\026\106\030\104\031\076\032\122\034\107\035\102\060" +
    "\100\061\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\110\005\113\006\121\007\103\011\112\024" +
    "\272\026\106\030\104\031\076\032\122\034\107\035\102" +
    "\060\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\274\001\001\000\002\001\001\000\034\004\110" +
    "\005\113\006\121\007\103\011\112\024\276\026\106\030" +
    "\104\031\076\032\122\034\107\035\102\060\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\110\005\113\006\121\007\103\011\112\024\302" +
    "\026\106\030\104\031\076\032\122\034\107\035\102\060" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\305\001\001\000\040\004\052\020\064\021\057\022" +
    "\047\023\074\025\060\037\061\040\056\041\055\044\050" +
    "\051\054\052\073\053\043\054\053\060\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\312\001\001\000\040\004\052\020\064\021\057\022" +
    "\047\023\074\025\060\037\061\040\056\041\055\044\050" +
    "\051\054\052\073\053\043\054\053\060\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\110\005\113\006\121\007\103\011" +
    "\112\024\320\026\106\030\104\031\076\032\122\034\107" +
    "\035\102\060\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\110" +
    "\005\113\006\121\007\103\011\112\024\325\026\106\030" +
    "\104\031\076\032\122\034\107\035\102\060\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\340\001\001\000\002\001\001" +
    "\000\004\004\342\001\001\000\002\001\001\000\006\014" +
    "\345\020\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\350\001\001\000\040\004" +
    "\052\020\064\021\057\022\047\023\074\025\060\037\061" +
    "\040\056\041\055\044\050\051\054\052\073\053\043\054" +
    "\053\060\045\001\001\000\002\001\001\000\004\004\353" +
    "\001\001\000\004\015\354\001\001\000\002\001\001\000" +
    "\004\020\356\001\001\000\002\001\001\000\004\004\360" +
    "\001\001\000\004\015\361\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer lex;
    
    public Sintax(Lexer lex){
        this.lex=lex;
    }

    public void syntax_error(Symbol s){
    System.out.println("Error de Sintaxis: Tipo: Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error de Sintaxis Tipo: No-Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) + "");
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    //Aquí debe ir la lista de tablas de símbolos
    
    HashMap<String, ArrayList<String> > listaTablaSimbolos = new HashMap<String, ArrayList<String> >();
    String currentHash;
    String globalHash = "globalTS"; 
   /* listaTablaSimbolos.put(globalHash, new ArrayList<String>() );*/               //listaTablaSimbolos se crea y se instancia, pero por algun extraño motivo no lo reconoce


    
    public void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("Tabla de símbolo: " + key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
            System.out.println("");
            }
        }
    }

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // caso_switch ::= SIAPARECE SPACEGATO encanto DOUBLEDOT conjuros 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(33/*caso_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // casos_switch ::= caso_switch 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(32/*casos_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(32/*casos_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cola_conjuro_logico ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cola_conjuro_logico ::= OR SPACEGATO conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cola_conjuro_logico ::= AND SPACEGATO conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conjuro_logico ::= NOTC SPACEGATO invocacion_funcion 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conjuro_logico ::= NOTC SPACEGATO conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conjuro_logico ::= NOTC SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conjuro_logico ::= NOT SPACEGATO invocacion_funcion 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // conjuro_logico ::= NOT SPACEGATO conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // conjuro_logico ::= NOT SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ritual_logico ::= conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(26/*ritual_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // encantamiento_relacional ::= DIFF 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // encantamiento_relacional ::= EQEQ 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // encantamiento_relacional ::= GREATEREQ 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // encantamiento_relacional ::= GREATER 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // encantamiento_relacional ::= LESSEQ 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // encantamiento_relacional ::= LESS 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // conjuro_relacional ::= conjuro_arcano encantamiento_relacional conjuro_arcano 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // encantos ::= encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(47/*encantos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // encantos ::= encantos COMMA encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(47/*encantos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // invocacion_funcion ::= SPACEGATO nombre_ingrediente PARENL encantos PARENR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(46/*invocacion_funcion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // invocacion_factor ::= invocacion_funcion 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // invocacion_factor ::= Runas 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // invocacion_factor ::= PARENL encanto PARENR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // invocacion_factor ::= SiNox 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // invocacion_factor ::= NumeraDecimus 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // invocacion_factor ::= Numera 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // invocacion_factor ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // invocacion_term ::= invocacion_factor 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(22/*invocacion_term*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conjuro_arcano_prima ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conjuro_arcano_prima ::= POW invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conjuro_arcano_prima ::= MOD invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conjuro_arcano_prima ::= DIV invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conjuro_arcano_prima ::= MUL invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conjuro_arcano_prima ::= MINUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conjuro_arcano_prima ::= PLUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conjuro_arcano ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conjuro_arcano ::= invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conjuro_escribir ::= ESCRIBIO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(42/*conjuro_escribir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conjuro_leer ::= RECITA PARENL nombre_ingrediente PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(41/*conjuro_leer*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conjuro_confractus ::= CONFRACTA DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(40/*conjuro_confractus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conjuro_revertir ::= RIVIERTO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(39/*conjuro_revertir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paso ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paso ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paso ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fin ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(37/*fin*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fin ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(37/*fin*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inicio ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inicio ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inicio ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicio_fin_paso ::= fin 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inicio_fin_paso ::= inicio COMMA fin 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inicio_fin_paso ::= inicio COMMA fin COMMA paso 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conjuro_para ::= PARARANGUS PARENL inicio_fin_paso PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(34/*conjuro_para*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conjuro_mientras ::= MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conjuro_mientras ::= MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conjuro_mutacion ::= MUTACION PARENL nombre_ingrediente PARENR KEYL casos_switch KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(31/*conjuro_mutacion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // conjuro_si ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conjuro_si ::= SI PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conjuro_si ::= SI PARENL encanto PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // enlace_encanto ::= nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(17/*enlace_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // invocacion_encanto ::= esencia SPACEGATO nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(16/*invocacion_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // encanto ::= ritual_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // encanto ::= conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // encanto ::= conjuro_arcano 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conjuro ::= nombre_ingrediente MINUSMINUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conjuro ::= nombre_ingrediente PLUSPLUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conjuro ::= invocacion_funcion DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conjuro ::= conjuro_escribir 
            {
              Object RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // conjuro ::= conjuro_leer 
            {
              Object RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conjuro ::= conjuro_confractus 
            {
              Object RESULT = null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conjuro ::= conjuro_revertir 
            {
              Object RESULT = null;
		int crleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int crright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conjuro ::= conjuro_para 
            {
              Object RESULT = null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conjuro ::= conjuro_mientras 
            {
              Object RESULT = null;
		int cmileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cmiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cmi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conjuro ::= conjuro_mutacion 
            {
              Object RESULT = null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conjuro ::= conjuro_si 
            {
              Object RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conjuro ::= enlace_encanto 
            {
              Object RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conjuro ::= invocacion_encanto 
            {
              Object RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // conjuro ::= creacion_ingredientes 
            {
              Object RESULT = null;
		int Cileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int Ciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object Ci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conjuros ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // conjuros ::= conjuros conjuro 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // hechizo_principal ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*hechizo_principal*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // hechizo_principal ::= HECHIZOPRINCIPAL PARENL PARENR KEYL conjuros KEYR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*hechizo_principal*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ritual_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ritual_ingredientes ::= COMMA esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_ingredientes ::= esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // creacion_ingredientes ::= error DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // creacion_ingredientes ::= esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombre_ingredienteleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombre_ingredienteright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombre_ingrediente = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // creacion_ingredientes ::= GLOBALIO SPACEGATO esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombre_ingredienteleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombre_ingredienteright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombre_ingrediente = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // esencia ::= RUNAS 
            {
              Object RESULT = null;
		RESULT = "Runas"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // esencia ::= RUNA 
            {
              Object RESULT = null;
		RESULT = "Runa"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // esencia ::= SINOX 
            {
              Object RESULT = null;
		RESULT = "Sinox"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // esencia ::= NUMERADECIMUS 
            {
              Object RESULT = null;
		RESULT = "Numera Decimus"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // esencia ::= NUMERA 
            {
              Object RESULT = null;
		RESULT = "Numera"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // hechizo ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // hechizo ::= creacion_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // hechizo ::= SPACEGATO HECHIZO SPACEGATO esencia SPACEGATO nombre_ingrediente PARENL lista_ingredientes PARENR KEYL conjuros KEYR 
            {
              Object RESULT = null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // hechizos ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // hechizos ::= hechizos hechizo 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Runas ::= STRING_LITERAL 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*Runas*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SiNox ::= FALSE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SiNox ::= TRUE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NumeraDecimus ::= NUMERADECIMUSLITERAL 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*NumeraDecimus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Numera ::= NUMERALITERAL 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*Numera*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nombre_ingrediente ::= NOMBREINGREDIENTE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*nombre_ingrediente*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encantamiento ::= error 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*encantamiento*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // encantamiento ::= ABRACADABRA hechizos hechizo_principal 
            {
              Object RESULT = null;
		imprimirTablaSimbolos(); System.out.println("fin de ejecución");
              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*encantamiento*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= encantamiento EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

