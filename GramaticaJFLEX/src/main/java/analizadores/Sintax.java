
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 25 01:35:33 CST 2023
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 25 01:35:33 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\003\006\000\002\004" +
    "\003\000\002\005\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\011\003\000\002\012\004\000" +
    "\002\012\002\000\002\013\015\000\002\013\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\025\010\000\002\025\006" +
    "\000\002\014\006\000\002\014\002\000\002\015\007\000" +
    "\002\015\002\000\002\016\010\000\002\017\004\000\002" +
    "\017\002\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\022\010\000\002\023" +
    "\006\000\002\040\012\000\002\040\016\000\002\042\011" +
    "\000\002\041\012\000\002\041\016\000\002\045\011\000" +
    "\002\052\007\000\002\053\004\000\002\054\007\000\002" +
    "\055\007\000\002\026\004\000\002\026\002\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\002\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\005\000\002\032\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\004\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\037\006\000\002\037\006\000\002\037\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\004\005\001\002\000\004\002\304\001" +
    "\002\000\004\061\006\001\002\000\022\005\ufff8\006\ufff8" +
    "\007\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\001" +
    "\002\000\022\005\021\006\013\007\022\022\011\023\017" +
    "\024\014\025\010\026\016\001\002\000\004\061\ufff2\001" +
    "\002\000\004\061\ufff5\001\002\000\022\005\ufff9\006\ufff9" +
    "\007\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\001" +
    "\002\000\004\063\277\001\002\000\004\061\ufff3\001\002" +
    "\000\004\061\275\001\002\000\004\061\ufff1\001\002\000" +
    "\004\061\ufff4\001\002\000\022\005\ufff6\006\ufff6\007\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\001\002\000" +
    "\004\061\032\001\002\000\004\061\024\001\002\000\004" +
    "\002\000\001\002\000\014\022\011\023\017\024\014\025" +
    "\010\026\016\001\002\000\004\061\026\001\002\000\004" +
    "\031\030\001\002\000\004\070\031\001\002\000\054\036" +
    "\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\057\uffff\060\uffff\062\uffff\063\uffff\064\uffff\067\uffff" +
    "\070\uffff\001\002\000\046\005\ufff0\006\ufff0\007\ufff0\011" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\031" +
    "\ufff0\066\ufff0\001\002\000\014\022\011\023\017\024\014" +
    "\025\010\026\016\001\002\000\004\061\034\001\002\000" +
    "\004\031\030\001\002\000\004\063\036\001\002\000\016" +
    "\022\011\023\017\024\014\025\010\026\016\064\uffed\001" +
    "\002\000\004\061\265\001\002\000\004\064\041\001\002" +
    "\000\004\065\042\001\002\000\042\007\uffe8\011\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\031\uffe8\066" +
    "\uffe8\001\002\000\042\007\022\011\062\013\070\014\066" +
    "\015\065\016\051\017\046\020\045\021\064\022\011\023" +
    "\017\024\014\025\010\026\016\031\030\066\067\001\002" +
    "\000\042\007\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\031\uffde\066\uffde\001\002\000\004\063" +
    "\261\001\002\000\004\070\260\001\002\000\042\007\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\031\uffe6\066\uffe6\001\002\000\042\007\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\066" +
    "\uffe1\001\002\000\004\063\254\001\002\000\004\067\251" +
    "\001\002\000\042\007\uffdd\011\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\031\uffdd\066\uffdd\001\002\000" +
    "\042\007\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\031\uffe0\066\uffe0\001\002\000\042\007\uffe3" +
    "\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\031\uffe3\066\uffe3\001\002\000\042\007\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\031\uffe2\066" +
    "\uffe2\001\002\000\042\007\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\066\uffe9\001\002" +
    "\000\042\007\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\031\uffe7\066\uffe7\001\002\000\042\007" +
    "\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\031\uffe4\066\uffe4\001\002\000\004\063\235\001\002" +
    "\000\004\061\227\001\002\000\004\063\223\001\002\000" +
    "\004\063\215\001\002\000\004\063\207\001\002\000\022" +
    "\005\ufff7\006\ufff7\007\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\001\002\000\004\063\073\001\002\000\042" +
    "\007\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\031\uffdf\066\uffdf\001\002\000\042\007\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\031" +
    "\uffe5\066\uffe5\001\002\000\040\027\106\030\112\031\030" +
    "\034\076\035\113\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\101\056\111\063\075\064\uffcc\001\002" +
    "\000\046\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\057\uffc2\060\uffc2\064\uffc2\070\uffc2\001" +
    "\002\000\040\027\106\030\112\031\030\034\076\035\113" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\101\056\111\063\075\064\uffcc\001\002\000\046\036\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\057\ufffe\060\ufffe\064\ufffe\070\ufffe\001\002\000\012\057" +
    "\175\060\176\064\uffae\070\uffae\001\002\000\046\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\057\uffbe\060\uffbe\064\uffbe\070\uffbe\001\002\000\004\061" +
    "\171\001\002\000\046\036\151\037\145\040\153\041\152" +
    "\042\150\043\146\045\147\046\154\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\057\uffc3\060\uffc3\064\uffc3" +
    "\070\uffc3\001\002\000\022\047\126\050\124\051\125\052" +
    "\122\053\130\054\123\064\uffdc\070\uffdc\001\002\000\006" +
    "\064\uffda\070\uffda\001\002\000\046\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\057\uffc1\060" +
    "\uffc1\064\uffc1\070\uffc1\001\002\000\046\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\057\ufffc" +
    "\060\ufffc\064\ufffc\070\ufffc\001\002\000\046\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\057" +
    "\uffc0\060\uffc0\064\uffc0\070\uffc0\001\002\000\004\064\132" +
    "\001\002\000\004\061\116\001\002\000\046\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\057" +
    "\ufffb\060\ufffb\064\ufffb\070\ufffb\001\002\000\046\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\057\ufffd\060\ufffd\064\ufffd\070\ufffd\001\002\000\046\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\057\uffbf\060\uffbf\064\uffbf\070\uffbf\001\002\000\006" +
    "\064\uffdb\070\uffdb\001\002\000\032\027\106\030\112\031" +
    "\030\034\076\035\113\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\063\075\001\002\000\046\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\057" +
    "\uffb2\060\uffb2\064\uffb2\070\uffb2\001\002\000\016\047\126" +
    "\050\124\051\125\052\122\053\130\054\123\001\002\000" +
    "\012\057\uffb1\060\uffb1\064\uffb1\070\uffb1\001\002\000\026" +
    "\027\uffb8\030\uffb8\031\uffb8\034\uffb8\035\uffb8\057\uffb8\060" +
    "\uffb8\063\uffb8\064\uffb8\070\uffb8\001\002\000\026\027\uffb6" +
    "\030\uffb6\031\uffb6\034\uffb6\035\uffb6\057\uffb6\060\uffb6\063" +
    "\uffb6\064\uffb6\070\uffb6\001\002\000\026\027\uffba\030\uffba" +
    "\031\uffba\034\uffba\035\uffba\057\uffba\060\uffba\063\uffba\064" +
    "\uffba\070\uffba\001\002\000\026\027\uffb9\030\uffb9\031\uffb9" +
    "\034\uffb9\035\uffb9\057\uffb9\060\uffb9\063\uffb9\064\uffb9\070" +
    "\uffb9\001\002\000\026\027\uffbb\030\uffbb\031\uffbb\034\uffbb" +
    "\035\uffbb\057\uffbb\060\uffbb\063\uffbb\064\uffbb\070\uffbb\001" +
    "\002\000\026\027\106\030\112\031\030\034\076\035\113" +
    "\057\uffcc\060\uffcc\063\075\064\uffcc\070\uffcc\001\002\000" +
    "\026\027\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\057\uffb7" +
    "\060\uffb7\063\uffb7\064\uffb7\070\uffb7\001\002\000\012\057" +
    "\uffbc\060\uffbc\064\uffbc\070\uffbc\001\002\000\004\065\133" +
    "\001\002\000\042\007\uffe8\011\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\031\uffe8\066\uffe8\001\002\000" +
    "\042\007\022\011\062\013\070\014\066\015\065\016\051" +
    "\017\046\020\045\021\064\022\011\023\017\024\014\025" +
    "\010\026\016\031\030\066\135\001\002\000\006\012\137" +
    "\070\136\001\002\000\042\007\uffd4\011\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\066\uffd4\001" +
    "\002\000\004\065\140\001\002\000\042\007\uffe8\011\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\031\uffe8" +
    "\066\uffe8\001\002\000\042\007\022\011\062\013\070\014" +
    "\066\015\065\016\051\017\046\020\045\021\064\022\011" +
    "\023\017\024\014\025\010\026\016\031\030\066\142\001" +
    "\002\000\004\070\143\001\002\000\042\007\uffd3\011\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\031\uffd3" +
    "\066\uffd3\001\002\000\026\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\057\uffcd\060\uffcd\064\uffcd\070\uffcd" +
    "\001\002\000\016\027\106\030\112\031\030\034\076\035" +
    "\113\063\075\001\002\000\016\027\106\030\112\031\030" +
    "\034\076\035\113\063\075\001\002\000\026\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\057\uffc5\060\uffc5" +
    "\064\uffc5\070\uffc5\001\002\000\016\027\106\030\112\031" +
    "\030\034\076\035\113\063\075\001\002\000\016\027\106" +
    "\030\112\031\030\034\076\035\113\063\075\001\002\000" +
    "\016\027\106\030\112\031\030\034\076\035\113\063\075" +
    "\001\002\000\016\027\106\030\112\031\030\034\076\035" +
    "\113\063\075\001\002\000\026\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\057\uffc4\060\uffc4\064\uffc4\070" +
    "\uffc4\001\002\000\046\036\151\037\145\040\153\041\152" +
    "\042\150\043\146\045\147\046\154\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\057\uffc3\060\uffc3\064\uffc3" +
    "\070\uffc3\001\002\000\026\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\057\uffc9\060\uffc9\064\uffc9\070\uffc9" +
    "\001\002\000\046\036\151\037\145\040\153\041\152\042" +
    "\150\043\146\045\147\046\154\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\057\uffc3\060\uffc3\064\uffc3\070" +
    "\uffc3\001\002\000\026\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\057\uffc8\060\uffc8\064\uffc8\070\uffc8\001" +
    "\002\000\046\036\151\037\145\040\153\041\152\042\150" +
    "\043\146\045\147\046\154\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\057\uffc3\060\uffc3\064\uffc3\070\uffc3" +
    "\001\002\000\026\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\057\uffcb\060\uffcb\064\uffcb\070\uffcb\001\002" +
    "\000\046\036\151\037\145\040\153\041\152\042\150\043" +
    "\146\045\147\046\154\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\057\uffc3\060\uffc3\064\uffc3\070\uffc3\001" +
    "\002\000\026\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\057\uffc7\060\uffc7\064\uffc7\070\uffc7\001\002\000" +
    "\046\036\151\037\145\040\153\041\152\042\150\043\146" +
    "\045\147\046\154\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\057\uffc3\060\uffc3\064\uffc3\070\uffc3\001\002" +
    "\000\026\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\057\uffc6\060\uffc6\064\uffc6\070\uffc6\001\002\000\046" +
    "\036\151\037\145\040\153\041\152\042\150\043\146\045" +
    "\147\046\154\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\057\uffc3\060\uffc3\064\uffc3\070\uffc3\001\002\000" +
    "\026\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\057\uffca\060\uffca\064\uffca\070\uffca\001\002\000\032\027" +
    "\106\030\112\031\030\034\076\035\113\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\063\075\001\002\000" +
    "\046\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\057\uffb4\060\uffb4\064\uffb4\070\uffb4\001\002" +
    "\000\012\057\uffb3\060\uffb3\064\uffb3\070\uffb3\001\002\000" +
    "\006\064\uffb5\070\uffb5\001\002\000\004\061\202\001\002" +
    "\000\004\061\177\001\002\000\006\055\101\056\111\001" +
    "\002\000\012\057\175\060\176\064\uffae\070\uffae\001\002" +
    "\000\006\064\uffaf\070\uffaf\001\002\000\006\055\101\056" +
    "\111\001\002\000\012\057\175\060\176\064\uffae\070\uffae" +
    "\001\002\000\006\064\uffb0\070\uffb0\001\002\000\004\064" +
    "\206\001\002\000\046\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\057\uffbd\060\uffbd\064\uffbd" +
    "\070\uffbd\001\002\000\004\031\030\001\002\000\004\064" +
    "\211\001\002\000\004\065\212\001\002\000\004\066\213" +
    "\001\002\000\004\070\214\001\002\000\042\007\uffd5\011" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\031" +
    "\uffd5\066\uffd5\001\002\000\004\064\216\001\002\000\004" +
    "\065\217\001\002\000\042\007\uffe8\011\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\031\uffe8\066\uffe8\001" +
    "\002\000\042\007\022\011\062\013\070\014\066\015\065" +
    "\016\051\017\046\020\045\021\064\022\011\023\017\024" +
    "\014\025\010\026\016\031\030\066\221\001\002\000\004" +
    "\070\222\001\002\000\042\007\uffd2\011\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2\066\uffd2\001" +
    "\002\000\040\027\106\030\112\031\030\034\076\035\113" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\101\056\111\063\075\064\uffcc\001\002\000\004\064\225" +
    "\001\002\000\004\070\226\001\002\000\042\007\uffce\011" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\031" +
    "\uffce\066\uffce\001\002\000\004\031\030\001\002\000\006" +
    "\067\232\070\231\001\002\000\046\005\uffef\006\uffef\007" +
    "\uffef\011\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\031\uffef\066\uffef\001\002\000\040\027\106\030\112" +
    "\031\030\034\076\035\113\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\101\056\111\063\075\070\uffcc" +
    "\001\002\000\004\070\234\001\002\000\042\007\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031" +
    "\uffd9\066\uffd9\001\002\000\040\027\106\030\112\031\030" +
    "\034\076\035\113\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\101\056\111\063\075\064\uffcc\001\002" +
    "\000\004\064\237\001\002\000\004\065\240\001\002\000" +
    "\042\007\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\031\uffe8\066\uffe8\001\002\000\042\007\022" +
    "\011\062\013\070\014\066\015\065\016\051\017\046\020" +
    "\045\021\064\022\011\023\017\024\014\025\010\026\016" +
    "\031\030\066\242\001\002\000\006\012\244\070\243\001" +
    "\002\000\042\007\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\031\uffd7\066\uffd7\001\002\000\004" +
    "\065\245\001\002\000\042\007\uffe8\011\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\031\uffe8\066\uffe8\001" +
    "\002\000\042\007\022\011\062\013\070\014\066\015\065" +
    "\016\051\017\046\020\045\021\064\022\011\023\017\024" +
    "\014\025\010\026\016\031\030\066\247\001\002\000\004" +
    "\070\250\001\002\000\042\007\uffd6\011\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\066\uffd6\001" +
    "\002\000\040\027\106\030\112\031\030\034\076\035\113" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\101\056\111\063\075\070\uffcc\001\002\000\004\070\253" +
    "\001\002\000\042\007\uffd8\011\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\031\uffd8\066\uffd8\001\002\000" +
    "\040\027\106\030\112\031\030\034\076\035\113\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\101\056" +
    "\111\063\075\064\uffcc\001\002\000\004\064\256\001\002" +
    "\000\004\070\257\001\002\000\042\007\uffd1\011\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\031\uffd1\066" +
    "\uffd1\001\002\000\042\007\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\066\uffd0\001\002" +
    "\000\004\031\030\001\002\000\004\064\263\001\002\000" +
    "\004\070\264\001\002\000\042\007\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf\066\uffcf" +
    "\001\002\000\004\031\030\001\002\000\006\062\270\064" +
    "\uffeb\001\002\000\004\064\uffee\001\002\000\014\022\011" +
    "\023\017\024\014\025\010\026\016\001\002\000\004\061" +
    "\272\001\002\000\004\031\030\001\002\000\006\062\270" +
    "\064\uffeb\001\002\000\004\064\uffec\001\002\000\004\031" +
    "\030\001\002\000\004\070\231\001\002\000\004\064\300" +
    "\001\002\000\004\065\301\001\002\000\042\007\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\031" +
    "\uffe8\066\uffe8\001\002\000\042\007\022\011\062\013\070" +
    "\014\066\015\065\016\051\017\046\020\045\021\064\022" +
    "\011\023\017\024\014\025\010\026\016\031\030\066\303" +
    "\001\002\000\004\002\uffea\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\006\001\001\000\012\013\011" +
    "\016\022\020\014\025\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\024\001\001\000\002\001" +
    "\001\000\004\004\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\032\001\001\000" +
    "\002\001\001\000\004\004\034\001\001\000\002\001\001" +
    "\000\006\014\037\020\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\042\001\001" +
    "\000\036\004\051\020\062\021\056\022\046\023\071\025" +
    "\057\040\060\041\055\042\054\045\047\052\053\053\070" +
    "\054\043\055\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\104\005\106" +
    "\006\113\007\077\024\107\026\102\030\101\031\073\032" +
    "\114\034\103\035\076\001\001\000\002\001\001\000\030" +
    "\004\104\005\106\006\113\007\077\024\204\026\102\030" +
    "\101\031\073\032\114\034\103\035\076\001\001\000\002" +
    "\001\001\000\004\037\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\143\001\001\000\004\033\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\116\005\106\006\113\007\077" +
    "\026\117\030\101\031\073\032\120\001\001\000\002\001" +
    "\001\000\004\033\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\104\005\106\006\113" +
    "\007\077\026\130\030\101\031\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\133" +
    "\001\001\000\036\004\051\020\062\021\056\022\046\023" +
    "\071\025\057\040\060\041\055\042\054\045\047\052\053" +
    "\053\070\054\043\055\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\140\001\001" +
    "\000\036\004\051\020\062\021\056\022\046\023\071\025" +
    "\057\040\060\041\055\042\054\045\047\052\053\053\070" +
    "\054\043\055\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\104\005\106\006\113" +
    "\007\077\030\166\031\073\001\001\000\016\004\104\005" +
    "\106\006\113\007\077\030\164\031\073\001\001\000\002" +
    "\001\001\000\016\004\104\005\106\006\113\007\077\030" +
    "\162\031\073\001\001\000\016\004\104\005\106\006\113" +
    "\007\077\030\160\031\073\001\001\000\016\004\104\005" +
    "\106\006\113\007\077\030\156\031\073\001\001\000\016" +
    "\004\104\005\106\006\113\007\077\030\154\031\073\001" +
    "\001\000\002\001\001\000\004\027\155\001\001\000\002" +
    "\001\001\000\004\027\157\001\001\000\002\001\001\000" +
    "\004\027\161\001\001\000\002\001\001\000\004\027\163" +
    "\001\001\000\002\001\001\000\004\027\165\001\001\000" +
    "\002\001\001\000\004\027\167\001\001\000\002\001\001" +
    "\000\022\004\171\005\106\006\113\007\077\026\117\030" +
    "\101\031\073\032\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\177\001\001\000\004\037\200\001\001" +
    "\000\002\001\001\000\004\035\202\001\001\000\004\037" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\217\001\001\000\036\004\051\020\062\021\056\022\046" +
    "\023\071\025\057\040\060\041\055\042\054\045\047\052" +
    "\053\053\070\054\043\055\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\104\005\106\006\113\007" +
    "\077\024\223\026\102\030\101\031\073\032\114\034\103" +
    "\035\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\104\005\106\006\113\007" +
    "\077\024\232\026\102\030\101\031\073\032\114\034\103" +
    "\035\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\104\005\106\006\113\007\077\024\235\026\102" +
    "\030\101\031\073\032\114\034\103\035\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\240\001\001" +
    "\000\036\004\051\020\062\021\056\022\046\023\071\025" +
    "\057\040\060\041\055\042\054\045\047\052\053\053\070" +
    "\054\043\055\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\245\001\001\000\036" +
    "\004\051\020\062\021\056\022\046\023\071\025\057\040" +
    "\060\041\055\042\054\045\047\052\053\053\070\054\043" +
    "\055\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\104\005\106\006\113\007\077\024\251\026\102" +
    "\030\101\031\073\032\114\034\103\035\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\104\005\106" +
    "\006\113\007\077\024\254\026\102\030\101\031\073\032" +
    "\114\034\103\035\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\265\001\001\000\004\015\266\001" +
    "\001\000\002\001\001\000\004\020\270\001\001\000\002" +
    "\001\001\000\004\004\272\001\001\000\004\015\273\001" +
    "\001\000\002\001\001\000\004\004\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\301\001\001\000\036\004\051\020\062\021\056\022\046" +
    "\023\071\025\057\040\060\041\055\042\054\045\047\052" +
    "\053\053\070\054\043\055\052\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer lex;
    public Sintax(Lexer lex){
        this.lex=lex;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cola_conjuro_logico ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cola_conjuro_logico ::= OR SPACEGATO conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cola_conjuro_logico ::= AND SPACEGATO conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conjuro_logico ::= NOTB SPACEGATO conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conjuro_logico ::= NOTB SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conjuro_logico ::= NOT SPACEGATO conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conjuro_logico ::= NOT SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ritual_logico ::= conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(26/*ritual_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // encantamiento_relacional ::= DIFF 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // encantamiento_relacional ::= EQEQ 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // encantamiento_relacional ::= GREATEREQ 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // encantamiento_relacional ::= GREATER 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // encantamiento_relacional ::= LESSEQ 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // encantamiento_relacional ::= LESS 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conjuro_relacional ::= conjuro_arcano encantamiento_relacional conjuro_arcano 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // invocacion_factor ::= PARENL encanto PARENR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // invocacion_factor ::= SiNox 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // invocacion_factor ::= NumeraDecimus 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // invocacion_factor ::= Numera 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // invocacion_factor ::= nombre_ingrediente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // invocacion_term ::= invocacion_factor 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(22/*invocacion_term*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conjuro_arcano_prima ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conjuro_arcano_prima ::= MINUSMINUS 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conjuro_arcano_prima ::= PLUSPLUS 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conjuro_arcano_prima ::= POW invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conjuro_arcano_prima ::= MOD invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conjuro_arcano_prima ::= DIV invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conjuro_arcano_prima ::= MUL invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conjuro_arcano_prima ::= MINUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conjuro_arcano_prima ::= PLUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conjuro_arcano ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conjuro_arcano ::= invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // conjuro_escribir ::= ESCRIBIO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(43/*conjuro_escribir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conjuro_leer ::= RECITA PARENL nombre_ingrediente PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(42/*conjuro_leer*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conjuro_confractus ::= CONFRACTA DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(41/*conjuro_confractus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conjuro_revertir ::= RIVIERTO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(40/*conjuro_revertir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // conjuro_para ::= PARARANGUS PARENL PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*conjuro_para*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conjuro_mientras ::= MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(31/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conjuro_mientras ::= MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(31/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conjuro_mutacion ::= MUTACION PARENL nombre_ingrediente PARENR KEYL KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(32/*conjuro_mutacion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conjuro_si ::= SI PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conjuro_si ::= SI PARENL encanto PARENR KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // enlace_encanto ::= nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(17/*enlace_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // invocacion_encanto ::= esencia SPACEGATO nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(16/*invocacion_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // encanto ::= ritual_logico 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // encanto ::= conjuro_relacional 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // encanto ::= conjuro_arcano 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conjuro ::= conjuro_escribir 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conjuro ::= conjuro_leer 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conjuro ::= conjuro_confractus 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conjuro ::= conjuro_revertir 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conjuro ::= conjuro_para 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conjuro ::= conjuro_mientras 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // conjuro ::= conjuro_mutacion 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conjuro ::= conjuro_si 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // conjuro ::= enlace_encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // conjuro ::= invocacion_encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conjuro ::= creacion_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // conjuros ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // conjuros ::= conjuros conjuro 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // hechizo_principal ::= HECHIZOPRINCIPAL PARENL PARENR KEYL conjuros KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*hechizo_principal*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ritual_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ritual_ingredientes ::= COMMA esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_ingredientes ::= esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // creacion_ingredientes ::= esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // creacion_ingredientes ::= GLOBALIO SPACEGATO esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // esencia ::= RUNAS 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // esencia ::= RUNA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // esencia ::= SINOX 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // esencia ::= NUMERADECIMUS 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // esencia ::= NUMERA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // hechizo ::= creacion_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // hechizo ::= HECHIZO SPACEGATO esencia SPACEGATO nombre_ingrediente PARENL lista_ingredientes PARENR KEYL conjuros KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // hechizos ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // hechizos ::= hechizos hechizo 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Runas ::= RUNASTRING 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*Runas*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SiNox ::= FALSE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SiNox ::= TRUE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NumeraDecimus ::= NUMERADECIMUSLITERAL 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*NumeraDecimus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Numera ::= NUMERALITERAL 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*Numera*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nombre_ingrediente ::= NOMBREINGREDIENTE 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*nombre_ingrediente*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // encantamiento ::= ABRACADABRA SPACEGATO hechizos hechizo_principal 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*encantamiento*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= encantamiento EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

