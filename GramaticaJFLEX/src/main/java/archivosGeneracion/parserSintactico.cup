/* Área 1 - Código de Usuario */

// Importación de Paquetes
package analizadores;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Hashtable;
import java.util.LinkedList;

import java_cup.runtime.*;


// Código para el Parser, Variables y Métodos de Manejo de Errores
init with {::};



action code{:
    //Aquí debe ir la lista de tablas de símbolos
    
    HashMap<String, ArrayList<String> > listaTablaSimbolos = new HashMap<String, ArrayList<String> >();
    String currentHash = "globalTS";
    String globalHash = "globalTS"; 
    

   
    public void imprimirTablaSimbolos(){
        System.out.println("====== Imprimiendo Tabla de Símbolos ======");
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println(">>>Tabla de símbolos: " + key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
        }
    }


    public String verificarTipoVariable(String var){
        boolean palabraEncontrada = false;
        String[] partesTablaSimbolos = null;
        String res = "null";
        for (String elemento : listaTablaSimbolos.get(currentHash)) {
            if (elemento.contains(var.toString())) {              //Si el nombre de la variable está en el currentHash se activa la bandera
                palabraEncontrada = true;
                break;                                          // Sale si encuentra la palabra

            }
        }
        for (String elemento2 : listaTablaSimbolos.get(globalHash)) {
            if (elemento2.contains(var.toString())) {             //Si el nombre de la variable está en elglobalHash se activa la bandera
                palabraEncontrada = true;
                break;                                          // Sale si encuentra la palabra
            }

        }

        if (!palabraEncontrada ) {                                                          
            System.out.println("Error semántico: Variable no existe en el alcance: " + var.toString());
       }else {
            // Si el scope actual (currentHash) existe en la tabla de símbolos
            if (listaTablaSimbolos.containsKey(currentHash)) {
                ArrayList<String> contexto = listaTablaSimbolos.get(currentHash);

                // Buscar la variable en el contexto actual
                for (String entrada : contexto) {
                    if (entrada.contains("Nombre Identificador: " + var.toString())) {                                                                                                                                      
                        int tipoIndex = entrada.indexOf("Tipo: "); //Se extrae el tipo de dato de la variable
                        String tipoVariable = entrada.substring(tipoIndex + 6);  // 6 es la longitud de "Tipo: "
                        partesTablaSimbolos = tipoVariable.split(" ");
                        // Ahora tienes el tipo de la variable
                        System.out.println("El tipo de " + var.toString() + " es: " + partesTablaSimbolos[0]);
                        break;  // Sale del ciclo se encuentra la variable la variable
                    }
                }
            } 
            if (listaTablaSimbolos.containsKey(globalHash)) {
                ArrayList<String> contexto = listaTablaSimbolos.get(globalHash);

                // Buscar la variable en el contexto actual
                for (String entrada : contexto) {
                    if (entrada.contains("Nombre Identificador: " + var.toString())) {
                        // Encontraste la entrada de la variable
                        // Ahora extrae el tipo
                        int tipoIndex = entrada.indexOf("Tipo: ");
                        String tipoVariable = entrada.substring(tipoIndex + 6);  // 6 es la longitud de "Tipo: "
                        partesTablaSimbolos = tipoVariable.split(" ");    
                        // Ahora tienes el tipo de la variable
                        System.out.println("El tipo de " + var.toString() + " es: " + partesTablaSimbolos[0]);
                        break; // Sale del ciclo se encuentra la variable la variable
                    }
                }
            }
            else {
                System.out.println("Error: Contexto actual no encontrado en la tabla de símbolos");
            }
            res = " :" + partesTablaSimbolos[0];        
            }
         return res;   
    }

    public String verificarTipoExpresionAritmetica(String it, String c){
        String[] partesOperando1 = it.toString().split(":"); 
        String[] partesOperando2 = c.toString().substring(1).split(":");
        boolean flag = false;
        String tipoOperacion = "null";
        System.out.println("TipoParte1: " + partesOperando1[1] );
        System.out.println("TipoParte2: " + partesOperando2[1] );
        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
            flag = true;
        }
        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
            flag = true;
        }

        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
        }else{
              tipoOperacion = partesOperando1[1];

        }
        return tipoOperacion;
    }

    public String verificarTipoExpresionAritmeticaDiv(String it, String c){
        String[] partesOperando1 = it.toString().split(":"); 
        String[] partesOperando2 = c.toString().substring(1).split(":");
        boolean flag = false;
        String tipoOperacion = "null";
        System.out.println("TipoParte1: " + partesOperando1[1] );
        System.out.println("TipoParte2: " + partesOperando2[1] );
        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
            flag = true;
        }
        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
            flag = true;
        }
        if(partesOperando2[0].equals("0")){
            System.out.println("División entre cero encontrada. Revise el operando." );
            flag = true;
        }

        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
           System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
        }else{
              tipoOperacion = partesOperando1[1];     
        }
        return tipoOperacion;
    }








:}


parser code {:
    // Connect this parser to a scanner!
    Lexer lex;
    
    public Sintax(Lexer lex){
        this.lex=lex;
    }

    public void syntax_error(Symbol s){
    System.out.println("Error de Sintaxis: Tipo: Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error de Sintaxis Tipo: No-Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) + "");
    }
    
:}

scan with {: return lex.next_token(); :};


//==================================================================================//
/* Área 2 - Declaraciones */

// Símbolos Terminales

// Palabras Reservadas
terminal ABRACADABRA, HECHIZO, HECHIZOPRINCIPAL, GLOBALIO, SIAPARECE, SI, SINO, MIENTRAS, MUTACION, PARARANGUS, RIVIERTO, CONFRACTA, RECITA, ESCRIBIO, NUMERA, NUMERADECIMUS, SINOX, RUNA, RUNAS, TRUE, FALSE;

// Literales
terminal NOMBREINGREDIENTE;
terminal RUNASTRING;
terminal STRING_LITERAL;
terminal NUMERALITERAL;
terminal NUMERADECIMUSLITERAL;

// Operadores Aritméticos
terminal PLUS, MINUS, MUL, DIV, MOD, POW, EQ;

// Operadores Unarios
terminal PLUSPLUS, MINUSMINUS;

// Operadores Lógicos
terminal LESS, LESSEQ, GREATER, GREATEREQ, EQEQ, DIFF, NOT, NOTB, NOTC, AND, OR;

// Otros
terminal SPACEGATO, COMMA, PARENL, PARENR, KEYL, KEYR, ASSIGN, DOTCOMMA, DOUBLEDOT, COMMENT, MULCOMMENTL, MULCOMMENTR;

// Símbolos NO-Terminales
non terminal encantamiento, nombre_ingrediente, Numera, NumeraDecimus, SiNox, Runa, Runas, hechizos, hechizo, lista_ingredientes, ritual_ingredientes, hechizo_principal, conjuros, esencia, conjuro, invocacion_encanto, enlace_encanto, encanto, creacion_ingredientes, conjuro_arcano, conjuro_arcano_prima, invocacion_term, invocacion_factor, conjuro_relacional, encantamiento_relacional, ritual_logico, conjuro_logico, cola_conjuro_logico, conjuro_si, conjuro_mientras, conjuro_mutacion, casos_switch, caso_switch, conjuro_para,inicio_fin_paso, inicio, fin, paso, conjuro_revertir, conjuro_confractus, conjuro_leer, conjuro_escribir, runica, runica_unica, runica_multiple, invocacion_funcion, encantos, hechizo_encabezado, hechizo_principal_encabezado ;

// Precedencias y Asociatividad de Operadores

precedence left POW;
precedence left MUL, DIV, MOD;
precedence left PLUS, MINUS;
precedence left EQ;
precedence left LESS, LESSEQ, GREATER, GREATEREQ, EQEQ, DIFF;
precedence left NOT, NOTB, NOTC;
precedence left AND, OR;

// Producción Inicial
start with encantamiento;


//==================================================================================//
/* Área 3 - Reglas Semánticas */

encantamiento ::=   {:
                        //System.out.println("Inicio programa\n");
                        ArrayList<String> lista = new ArrayList<String>();
                        String tipoTabla = "Globales";
                        lista.add(tipoTabla);
                        listaTablaSimbolos.put(currentHash, lista);
                    :}
                        
                ABRACADABRA hechizos hechizo_principal {:imprimirTablaSimbolos(); System.out.println("-=-=-=-=- fin de ejecución -=-=-=-=-");:} ///Se debe imprimir la lista de Símbolos
                | error
;


nombre_ingrediente ::= NOMBREINGREDIENTE:n      {: RESULT = n; :}
;

Numera ::= NUMERALITERAL:n                      {: RESULT = n; :}
;

NumeraDecimus ::= NUMERADECIMUSLITERAL:nd       {: RESULT = nd; :}
;

SiNox ::= TRUE:t | FALSE:t                      {: RESULT = t; :}                      
;

Runas ::= STRING_LITERAL:s                      {: RESULT = s; :}
;


hechizos ::= hechizos hechizo
                |
;

hechizo_encabezado ::= SPACEGATO HECHIZO SPACEGATO esencia:e SPACEGATO nombre_ingrediente:n 
                                                                                                {:
                                                                                                 //System.out.println("Inicio de Función + n.toString()");
                                                                                                ArrayList<String> lista = new ArrayList<String>();
                                                                                                currentHash = n.toString();
                                                                                                String tipoTabla = "Funcion";
                                                                                                lista.add(tipoTabla);
                                                                                                listaTablaSimbolos.put(currentHash, lista);
                                                                                                :}
;



hechizo ::=  hechizo_encabezado PARENL lista_ingredientes PARENR KEYL conjuros KEYR                                                                                                                      
                | creacion_ingredientes 
                | error KEYR
 
;

esencia ::= NUMERA                              {:RESULT = "Numera"; :}
                | NUMERADECIMUS                 {:RESULT = "NumeraDecimus"; :}
                | SINOX                         {:RESULT = "SiNox"; :}
                | RUNA                          {:RESULT = "Runa"; :}
                | RUNAS                         {:RESULT = "Runas"; :}
;


creacion_ingredientes ::= GLOBALIO SPACEGATO esencia:e SPACEGATO nombre_ingrediente:n DOTCOMMA      {: listaTablaSimbolos.get(currentHash).add("Tipo: "  + e.toString() + " Nombre Identificador: " + n.toString()); :}         
                | esencia:e SPACEGATO nombre_ingrediente:n DOTCOMMA                                 {: listaTablaSimbolos.get(currentHash).add("Tipo: " +  e.toString() + " Nombre Identificador: " + n.toString() ); :}
                | error DOTCOMMA
;
                
lista_ingredientes ::= esencia SPACEGATO nombre_ingrediente ritual_ingredientes //Averiguar que esencia y nombre_ingrediente sean del mmismo tipo
                |
;

ritual_ingredientes ::= COMMA esencia SPACEGATO nombre_ingrediente ritual_ingredientes //Averiguar que esencia y nombre_ingrediente sean del mmismo tipo
                |
;

hechizo_principal_encabezado ::= SPACEGATO HECHIZOPRINCIPAL                                         {:
                                                                                                    //System.out.println("Inicio de Main + n.toString()");
                                                                                                    ArrayList<String> lista = new ArrayList<String>();
                                                                                                    currentHash = "Main";
                                                                                                    String tipoTabla = "Main";
                                                                                                    lista.add(tipoTabla);
                                                                                                    listaTablaSimbolos.put(currentHash, lista);
                                                                                                    :}
;

hechizo_principal ::=  hechizo_principal_encabezado PARENL PARENR KEYL conjuros:c KEYR                           
          | error KEYR
               
;

conjuros ::= conjuros conjuro                      
           |
;

conjuro ::= creacion_ingredientes:Ci                                                                       //{: listaTablaSimbolos.get(currentHash).add(Ci.toString()); :}                   
            | invocacion_encanto:ie                                                                        //{: listaTablaSimbolos.get(currentHash).add(ie.toString()); :} 
            | enlace_encanto:ee                                                                            //{: listaTablaSimbolos.get(currentHash).add(ee.toString()); :} 
            | conjuro_si:cs                                                                                //{: listaTablaSimbolos.get(currentHash).add(cs.toString()); :} 
            | conjuro_mutacion:cm                                                                          //{: listaTablaSimbolos.get(currentHash).add(cm.toString()); :}
            | conjuro_mientras:cmi                                                                         //{: listaTablaSimbolos.get(currentHash).add(cmi.toString()); :}
            | conjuro_para:cp                                                                              //{: listaTablaSimbolos.get(currentHash).add(cp.toString()); :}
            | conjuro_revertir:cr                                                                          //{: listaTablaSimbolos.get(currentHash).add(cr.toString()); :} 
            | conjuro_confractus:cc                                                                        //{: listaTablaSimbolos.get(currentHash).add(cc.toString()); :} 
            | conjuro_leer:cl                                                                              //{: listaTablaSimbolos.get(currentHash).add(cl.toString()); :}                                                                             
            | conjuro_escribir:ce                                                                          //{: listaTablaSimbolos.get(currentHash).add(ce.toString()); :} 
            | invocacion_funcion DOTCOMMA //Averiguar que el nombre de la función este en el currentHash de la tabla de Simbolos
            | nombre_ingrediente PLUSPLUS DOTCOMMA
            | nombre_ingrediente MINUSMINUS DOTCOMMA
            /*| runica*/
           
;



encanto ::= conjuro_arcano:c    {: System.out.println("Valor de Encanto= " + c); :}//si c es null, mostrar error
            | conjuro_relacional 
            | ritual_logico
            
;


invocacion_encanto ::= esencia:e SPACEGATO nombre_ingrediente:n ASSIGN encanto DOTCOMMA                     {: listaTablaSimbolos.get(currentHash).add("Tipo: " + e.toString() + " Nombre Identificador: " + n.toString() ); :}
            /*| error*/
            
;


enlace_encanto ::= nombre_ingrediente ASSIGN encanto DOTCOMMA
;


conjuro_si ::= SI PARENL encanto PARENR KEYL conjuros KEYR DOTCOMMA
              | SI PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA
              | error KEYR

;
//---------casos_switch
conjuro_mutacion ::= MUTACION PARENL nombre_ingrediente PARENR KEYL casos_switch KEYR DOTCOMMA
            /*| error KEYR*/                                                //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
            /*| error*/                                                     //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
           
                
;


conjuro_mientras ::= MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR  DOTCOMMA
                 | MIENTRAS PARENL encanto PARENR KEYL conjuros KEYR SINO KEYL conjuros KEYR DOTCOMMA
                /*| error KEYR*/                                                //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
                /*| error*/                                                     //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
;


///-------- inicio_fin_paso se debe arreglar====================================================================================================
conjuro_para ::= PARARANGUS PARENL inicio_fin_paso PARENR KEYL conjuros KEYR DOTCOMMA
            
;

inicio_fin_paso ::= inicio COMMA fin COMMA paso
            | inicio COMMA fin
            /*| fin COMMA paso      */                  //Genera problemas
            | fin
;



///---------encanto, epsilon
inicio ::=  nombre_ingrediente ASSIGN encanto  
            | nombre_ingrediente
            |
;

fin::= nombre_ingrediente ASSIGN encanto
        | nombre_ingrediente
;

paso ::= nombre_ingrediente ASSIGN encanto
        | nombre_ingrediente
        |
;



conjuro_revertir ::= RIVIERTO PARENL encanto PARENR DOTCOMMA
            /*| error KEYR*/                                                //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
            /*| error*/                                                     //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado 
;

conjuro_confractus ::= CONFRACTA DOTCOMMA
            /*| error KEYR*/                                                //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
            /*| error*/                                                     //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado 
;

conjuro_leer ::= RECITA PARENL nombre_ingrediente PARENR DOTCOMMA
            /*| error KEYR*/                                                //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
            /*| error*/                                                     //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado 
;


conjuro_escribir ::= ESCRIBIO PARENL encanto PARENR DOTCOMMA
            /*| error KEYR*/                                                //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado
            /*| error*/                                                     //Manejo de errores da problemas al generar la clase cup en el main, por eso está comentado 
;


conjuro_arcano ::= invocacion_term:it conjuro_arcano_prima:c                            {:           
                                                                                        String[] partesOperando1 = it.toString().split(":"); 
                                                                                        String[] partesOperando2 = c.toString().substring(1).split(":");
                                                                                        boolean flag = false;
                                                                                        String tipoOperacion = "null";
                                                                                        System.out.println("TipoParte1: " + partesOperando1[1] );
                                                                                        System.out.println("TipoParte2: " + partesOperando2[1] );
                                                                                        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus")|| (partesOperando1[1].equals("SiNox") && partesOperando2[1].equals("Empty")) )){  //Si el tipo del primer operando no es int o float o no cumple que el primer operando sea un Bool y el segundo un Empty
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
                                                                                            flag = true;
                                                                                        }
                                                                                        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float o vacio
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
                                                                                            flag = true;
                                                                                        }

                                                                                        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
                                                                                            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
                                                                                        }else{
                                                                                              tipoOperacion = partesOperando1[1];
                                                                                              
                                                                                        }
                                                                                        
                                                                                        System.out.println("====>Tipo de la Operación Combinada: " + tipoOperacion);
                                                                                        RESULT = tipoOperacion ; 
                                                                                        :}
            |
;

conjuro_arcano_prima ::= PLUS invocacion_term:it conjuro_arcano_prima:c                 {:RESULT = "+:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString());  :}
            | MINUS invocacion_term:it conjuro_arcano_prima:c                           {:RESULT = "-:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString()); :}
            | MUL invocacion_term:it conjuro_arcano_prima:c                             {:RESULT = "*:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString()) ;:}
            | DIV invocacion_term:it conjuro_arcano_prima:c                             {:RESULT = "/:"  + verificarTipoExpresionAritmeticaDiv(it.toString(),c.toString()) ;:}
            | MOD invocacion_term:it conjuro_arcano_prima:c                             {:RESULT = "%:"  + verificarTipoExpresionAritmeticaDiv(it.toString(),c.toString()) ;:}
            | POW invocacion_term:it conjuro_arcano_prima:c                             {:RESULT = "^:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString()) ;:}
            |                                                                           {:RESULT = "x:Empty"; :}

;

invocacion_term ::= invocacion_factor:f                                              {: RESULT = f; :}
;

invocacion_factor ::= nombre_ingrediente:n                  {: RESULT = verificarTipoVariable(n.toString()); :}
            | Numera:n                                      {: RESULT = n  + ":Numera";          :}
            | NumeraDecimus:nd                              {: RESULT = nd + ":NumeraDecimus";   :}
            | SiNox:sn                                      {: RESULT = sn + ":SiNox";           :}                                                                                 //Podría eliminarse
            | PARENL encanto:e PARENR                       {: RESULT = e;                       :}
            | Runas:r                                       {: RESULT = r + ":Runas";            :}
            | invocacion_funcion
          /*| Runas*/
;

invocacion_funcion ::= SPACEGATO nombre_ingrediente PARENL encantos PARENR
           //| SPACEGATO nombre_ingrediente PARENL encantos PARENR DOTCOMMA
;

encantos ::= encantos COMMA encanto
            | encanto           
;

conjuro_relacional ::= conjuro_arcano:c1 encantamiento_relacional:e conjuro_arcano:c2                     {:System.out.println("C1 es:" + c1.toString() + "y C2 es: " + c2.toString());:}
                        | SiNox encantamiento_relacional SiNox                                            {:System.out.println("Relacional es Bool");:}
                        | nombre_ingrediente:n1 encantamiento_relacional:e nombre_ingrediente:n2          {:verificarTipoVariable(n1.toString());verificarTipoVariable(n2.toString());:}               
                        //| nombre_ingrediente:n1 encantamiento_relacional:e  conjuro_arcano:c2
                        //| conjuro_arcano:c1 encantamiento_relacional:e nombre_ingrediente:n2
;

encantamiento_relacional ::= LESS       {: RESULT = "LESS"; :}
                            | LESSEQ    {: RESULT = "LESSEQ"; :}
                            | GREATER   {: RESULT = "GREATER"; :}
                            | GREATEREQ {: RESULT = "GREATEREQ"; :}
   
                            | EQEQ      {: RESULT = "EQEQ"; :} 
                            | DIFF      {: RESULT = "DIFF"; :}
;



ritual_logico ::= conjuro_logico cola_conjuro_logico        ///Por arreglar
                
;

conjuro_logico ::= NOT SPACEGATO nombre_ingrediente 
            |  NOT SPACEGATO conjuro_relacional 
            |  NOT SPACEGATO invocacion_funcion
            |  NOTC SPACEGATO nombre_ingrediente            
            |  NOTC SPACEGATO conjuro_relacional
            |  NOTC SPACEGATO invocacion_funcion
            //|  nombre_ingrediente
            //|  conjuro_relacional
            //|  invocacion_funcion
            
;

cola_conjuro_logico ::= AND SPACEGATO conjuro_logico cola_conjuro_logico
                   | OR SPACEGATO conjuro_logico cola_conjuro_logico
                   |
;

casos_switch ::= casos_switch caso_switch 
            | caso_switch
;

caso_switch  ::= SIAPARECE SPACEGATO encanto DOUBLEDOT conjuros 
           // | SIAPARECE SPACEGATO encanto DOUBLEDOT conjuros conjuro_confractus
;








/*
//////Estos de abajo no funcionan:

/*
runica ::= Runas
;
*/
