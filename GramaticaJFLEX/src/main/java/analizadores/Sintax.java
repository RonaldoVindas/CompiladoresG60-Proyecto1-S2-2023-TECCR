
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Oct 31 20:27:54 CST 2023
//----------------------------------------------------

package analizadores;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Stack;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Oct 31 20:27:54 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\076\002\000\002\003" +
    "\006\000\002\003\003\000\002\004\003\000\002\005\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\011\003\000\002\012\004\000\002\012\002\000\002" +
    "\062\010\000\002\066\007\000\002\013\006\000\002\013" +
    "\003\000\002\013\004\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\025\010\000\002\025\006\000\002\025\004\000\002" +
    "\014\006\000\002\014\002\000\002\015\007\000\002\015" +
    "\002\000\002\063\004\000\002\016\010\000\002\016\004" +
    "\000\002\017\004\000\002\017\002\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\022\010\000\002" +
    "\023\006\000\002\067\006\000\002\077\002\000\002\070" +
    "\007\000\002\070\004\000\002\075\006\000\002\037\004" +
    "\000\002\037\005\000\002\037\004\000\002\071\006\000" +
    "\002\040\007\000\002\040\010\000\002\072\006\000\002" +
    "\041\007\000\002\042\004\000\002\042\003\000\002\073" +
    "\006\000\002\043\005\000\002\074\006\000\002\044\007" +
    "\000\002\045\007\000\002\045\005\000\002\045\003\000" +
    "\002\046\005\000\002\046\003\000\002\046\002\000\002" +
    "\047\005\000\002\047\003\000\002\047\004\000\002\050" +
    "\005\000\002\050\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\002\000\002\051\007\000\002\052\004\000" +
    "\002\053\007\000\002\054\007\000\002\026\004\000\002" +
    "\026\005\000\002\026\002\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\002\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\005\000\002\031\003\000\002\031" +
    "\003\000\002\060\007\000\002\061\005\000\002\061\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\004\000\002\035\003\000\002\064\003\000\002\064\005" +
    "\000\002\064\003\000\002\064\005\000\002\065\005\000" +
    "\002\065\005\000\002\036\006\000\002\036\006\000\002" +
    "\036\005\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\006\003\005\004\000\001\002\000\004\002" +
    "\u0116\001\002\000\004\002\ufffe\001\002\000\004\004\007" +
    "\001\002\000\022\003\ufff6\007\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\062\ufff6\001\002\000\022\003\024" +
    "\007\025\022\013\023\021\024\016\025\012\026\017\062" +
    "\014\001\002\000\044\003\uffe0\007\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031\uffe0\062\uffe0" +
    "\001\002\000\004\062\uffed\001\002\000\004\062\ufff0\001" +
    "\002\000\006\005\u0108\006\u0109\001\002\000\022\003\ufff7" +
    "\007\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\062" +
    "\ufff7\001\002\000\004\062\uffee\001\002\000\004\062\uffec" +
    "\001\002\000\004\062\u0106\001\002\000\004\062\uffef\001" +
    "\002\000\004\064\055\001\002\000\022\003\ufff2\007\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\062\ufff2\001" +
    "\002\000\006\067\053\071\054\001\002\000\004\062\046" +
    "\001\002\000\004\064\030\001\002\000\004\002\uffff\001" +
    "\002\000\016\022\013\023\021\024\016\025\012\026\017" +
    "\065\uffe7\001\002\000\004\062\035\001\002\000\004\065" +
    "\033\001\002\000\004\066\034\001\002\000\044\003\ufff4" +
    "\007\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\031\ufff4\062\ufff4\001\002\000\004\031\037\001" +
    "\002\000\006\063\041\065\uffe5\001\002\000\060\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\056\ufffd\060\ufffd\061\ufffd\063\ufffd\064\ufffd\065\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\001\002\000\004\065\uffe8\001\002" +
    "\000\014\022\013\023\021\024\016\025\012\026\017\001" +
    "\002\000\004\062\043\001\002\000\004\031\037\001\002" +
    "\000\006\063\041\065\uffe5\001\002\000\004\065\uffe6\001" +
    "\002\000\014\022\013\023\021\024\016\025\012\026\017" +
    "\001\002\000\004\062\050\001\002\000\004\031\037\001" +
    "\002\000\004\071\052\001\002\000\046\003\uffeb\007\uffeb" +
    "\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\031\uffeb\062\uffeb\067\uffeb\001\002\000\024\002\uffe2\003" +
    "\ufff1\007\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\062\ufff1\001\002\000\046\003\uffe9\007\uffe9\011\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\062" +
    "\uffe9\067\uffe9\001\002\000\004\065\056\001\002\000\004" +
    "\066\057\001\002\000\044\003\uffe0\007\uffe0\011\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031\uffe0\062\uffe0\067" +
    "\uffe0\001\002\000\044\003\103\007\025\011\066\013\074" +
    "\014\070\015\105\017\101\020\077\021\100\022\013\023" +
    "\021\024\016\025\012\026\017\031\037\062\112\067\114" +
    "\001\002\000\046\003\uffe1\007\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\062\uffe1\067" +
    "\uffe1\001\002\000\046\003\uffd7\007\uffd7\011\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\062\uffd7" +
    "\067\uffd7\001\002\000\046\003\uffdf\007\uffdf\011\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\031\uffdf\062" +
    "\uffdf\067\uffdf\001\002\000\046\003\uffd9\007\uffd9\011\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9" +
    "\062\uffd9\067\uffd9\001\002\000\046\003\uffdb\007\uffdb\011" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\031" +
    "\uffdb\062\uffdb\067\uffdb\001\002\000\004\064\u0103\001\002" +
    "\000\010\003\263\012\265\071\u0100\001\002\000\004\064" +
    "\375\001\002\000\046\003\uffda\007\uffda\011\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\031\uffda\062\uffda" +
    "\067\uffda\001\002\000\046\003\uffd6\007\uffd6\011\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\062" +
    "\uffd6\067\uffd6\001\002\000\046\003\uffdd\007\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd" +
    "\062\uffdd\067\uffdd\001\002\000\004\064\372\001\002\000" +
    "\004\062\364\001\002\000\004\071\363\001\002\000\004" +
    "\064\357\001\002\000\004\064\353\001\002\000\004\071" +
    "\352\001\002\000\004\066\347\001\002\000\006\067\346" +
    "\071\054\001\002\000\004\066\331\001\002\000\004\064" +
    "\301\001\002\000\004\066\275\001\002\000\046\003\uffde" +
    "\007\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\031\uffde\062\uffde\067\uffde\001\002\000\046\003" +
    "\uffd8\007\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\031\uffd8\062\uffd8\067\uffd8\001\002\000\004" +
    "\066\260\001\002\000\004\031\037\001\002\000\046\003" +
    "\uffdc\007\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\031\uffdc\062\uffdc\067\uffdc\001\002\000\004" +
    "\002\uffe3\001\002\000\010\045\117\046\116\070\120\001" +
    "\002\000\004\071\250\001\002\000\004\071\247\001\002" +
    "\000\050\027\135\030\143\031\037\033\140\034\124\035" +
    "\144\037\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\131\056\150\057\142\062\112\064\122\071" +
    "\uffa6\001\002\000\046\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\060\uff9e\061\uff9e\063\uff9e\065\uff9e\071\uff9e" +
    "\072\uff9e\001\002\000\050\027\135\030\143\031\037\033" +
    "\140\034\124\035\144\037\145\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\131\056\150\057\142\062" +
    "\112\064\122\065\uffa6\001\002\000\046\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\053\uff97\054\uff97\060\uff97\061\uff97\063\uff97" +
    "\065\uff97\071\uff97\072\uff97\001\002\000\046\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\060\ufffc\061\ufffc\063" +
    "\ufffc\065\ufffc\071\ufffc\072\ufffc\001\002\000\006\060\231" +
    "\061\232\001\002\000\016\060\uff89\061\uff89\063\uff89\065" +
    "\uff89\071\uff89\072\uff89\001\002\000\042\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\047\214\050\211\051" +
    "\213\052\210\053\216\054\212\063\uff9a\065\uff9a\071\uff9a" +
    "\072\uff9a\001\002\000\046\036\164\037\166\040\165\041" +
    "\167\042\161\043\163\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\060\uff9f\061\uff9f\063\uff9f\065\uff9f\071" +
    "\uff9f\072\uff9f\001\002\000\004\062\223\001\002\000\012" +
    "\063\uffd0\065\uffd0\071\uffd0\072\uffd0\001\002\000\026\047" +
    "\214\050\211\051\213\052\210\053\216\054\212\063\uffd2" +
    "\065\uffd2\071\uffd2\072\uffd2\001\002\000\042\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\047\214\050\211" +
    "\051\213\052\210\053\216\054\212\063\uff9d\065\uff9d\071" +
    "\uff9d\072\uff9d\001\002\000\046\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\060\ufffa\061\ufffa\063\ufffa\065\ufffa" +
    "\071\ufffa\072\ufffa\001\002\000\046\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\060\uff9c\061\uff9c\063\uff9c\065" +
    "\uff9c\071\uff9c\072\uff9c\001\002\000\046\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\047\uff98\050\uff98\051" +
    "\uff98\052\uff98\053\uff98\054\uff98\060\uff98\061\uff98\063\uff98" +
    "\065\uff98\071\uff98\072\uff98\001\002\000\046\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\047\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\060\ufff8\061\ufff8\063" +
    "\ufff8\065\ufff8\071\ufff8\072\ufff8\001\002\000\004\071\220" +
    "\001\002\000\004\062\204\001\002\000\046\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\060\ufff9\061\ufff9\063" +
    "\ufff9\065\ufff9\071\ufff9\072\ufff9\001\002\000\046\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\060\ufffb\061\ufffb" +
    "\063\ufffb\065\ufffb\071\ufffb\072\ufffb\001\002\000\022\027" +
    "\135\030\143\031\037\033\140\034\124\035\144\062\112" +
    "\064\122\001\002\000\046\036\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\060\uff9b\061\uff9b\063\uff9b\065\uff9b\071" +
    "\uff9b\072\uff9b\001\002\000\016\060\uff88\061\uff88\063\uff88" +
    "\065\uff88\071\uff88\072\uff88\001\002\000\006\031\037\062" +
    "\112\001\002\000\016\060\uff86\061\uff86\063\uffd1\065\uffd1" +
    "\071\uffd1\072\uffd1\001\002\000\004\056\155\001\002\000" +
    "\004\056\154\001\002\000\016\060\uff85\061\uff85\063\uff85" +
    "\065\uff85\071\uff85\072\uff85\001\002\000\016\060\uff87\061" +
    "\uff87\063\uff87\065\uff87\071\uff87\072\uff87\001\002\000\046" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\060\uff9d" +
    "\061\uff9d\063\uff9d\065\uff9d\071\uff9d\072\uff9d\001\002\000" +
    "\046\036\164\037\166\040\165\041\167\042\161\043\163" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\060" +
    "\uff9f\061\uff9f\063\uff9f\065\uff9f\071\uff9f\072\uff9f\001\002" +
    "\000\046\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\060\uff9a\061\uff9a\063\uff9a\065\uff9a\071\uff9a\072\uff9a\001" +
    "\002\000\022\027\135\030\143\031\037\033\140\034\124" +
    "\035\144\062\112\064\122\001\002\000\032\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\060\uffa7\061\uffa7" +
    "\063\uffa7\065\uffa7\071\uffa7\072\uffa7\001\002\000\022\027" +
    "\135\030\143\031\037\033\140\034\124\035\144\062\112" +
    "\064\122\001\002\000\022\027\135\030\143\031\037\033" +
    "\140\034\124\035\144\062\112\064\122\001\002\000\022" +
    "\027\135\030\143\031\037\033\140\034\124\035\144\062" +
    "\112\064\122\001\002\000\022\027\135\030\143\031\037" +
    "\033\140\034\124\035\144\062\112\064\122\001\002\000" +
    "\022\027\135\030\143\031\037\033\140\034\124\035\144" +
    "\062\112\064\122\001\002\000\046\036\164\037\166\040" +
    "\165\041\167\042\161\043\163\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\060\uff9f\061\uff9f\063\uff9f\065" +
    "\uff9f\071\uff9f\072\uff9f\001\002\000\032\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\060\uffa2\061\uffa2\063" +
    "\uffa2\065\uffa2\071\uffa2\072\uffa2\001\002\000\046\036\164" +
    "\037\166\040\165\041\167\042\161\043\163\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\060\uff9f\061\uff9f" +
    "\063\uff9f\065\uff9f\071\uff9f\072\uff9f\001\002\000\032\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\060\uffa4" +
    "\061\uffa4\063\uffa4\065\uffa4\071\uffa4\072\uffa4\001\002\000" +
    "\046\036\164\037\166\040\165\041\167\042\161\043\163" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\060" +
    "\uff9f\061\uff9f\063\uff9f\065\uff9f\071\uff9f\072\uff9f\001\002" +
    "\000\032\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\060\uffa3\061\uffa3\063\uffa3\065\uffa3\071\uffa3\072\uffa3" +
    "\001\002\000\046\036\164\037\166\040\165\041\167\042" +
    "\161\043\163\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\060\uff9f\061\uff9f\063\uff9f\065\uff9f\071\uff9f\072" +
    "\uff9f\001\002\000\032\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\060\uffa5\061\uffa5\063\uffa5\065\uffa5\071" +
    "\uffa5\072\uffa5\001\002\000\046\036\164\037\166\040\165" +
    "\041\167\042\161\043\163\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\060\uff9f\061\uff9f\063\uff9f\065\uff9f" +
    "\071\uff9f\072\uff9f\001\002\000\032\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\060\uffa0\061\uffa0\063\uffa0" +
    "\065\uffa0\071\uffa0\072\uffa0\001\002\000\046\036\164\037" +
    "\166\040\165\041\167\042\161\043\163\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\060\uff9f\061\uff9f\063" +
    "\uff9f\065\uff9f\071\uff9f\072\uff9f\001\002\000\032\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\060\uffa1\061" +
    "\uffa1\063\uffa1\065\uffa1\071\uffa1\072\uffa1\001\002\000\046" +
    "\027\135\030\143\031\037\033\140\034\124\035\144\037" +
    "\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\131\056\150\057\142\062\112\064\122\001\002\000" +
    "\016\060\uff83\061\uff83\063\uff83\065\uff83\071\uff83\072\uff83" +
    "\001\002\000\016\047\214\050\211\051\213\052\210\053" +
    "\216\054\212\001\002\000\016\060\uff86\061\uff86\063\uff86" +
    "\065\uff86\071\uff86\072\uff86\001\002\000\040\027\uff8d\030" +
    "\uff8d\031\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\071\uff8d\072" +
    "\uff8d\001\002\000\040\027\uff8f\030\uff8f\031\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\037\uff8f\060\uff8f\061\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\071\uff8f\072\uff8f\001\002\000\040" +
    "\027\uff8b\030\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\037" +
    "\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b" +
    "\071\uff8b\072\uff8b\001\002\000\040\027\uff8e\030\uff8e\031" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\071\uff8e\072\uff8e\001" +
    "\002\000\040\027\uff90\030\uff90\031\uff90\033\uff90\034\uff90" +
    "\035\uff90\037\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064" +
    "\uff90\065\uff90\071\uff90\072\uff90\001\002\000\040\027\135" +
    "\030\143\031\037\033\140\034\124\035\144\037\145\060" +
    "\uffa6\061\uffa6\062\112\063\uffa6\064\122\065\uffa6\071\uffa6" +
    "\072\uffa6\001\002\000\040\027\uff8c\030\uff8c\031\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\037\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\071\uff8c\072\uff8c\001\002\000" +
    "\016\060\uff93\061\uff93\063\uff93\065\uff93\071\uff93\072\uff93" +
    "\001\002\000\046\003\uffce\007\uffce\011\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce\062\uffce\067" +
    "\uffce\001\002\000\004\031\037\001\002\000\016\060\uff91" +
    "\061\uff91\063\uff91\065\uff91\071\uff91\072\uff91\001\002\000" +
    "\046\027\135\030\143\031\037\033\140\034\124\035\144" +
    "\037\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\131\056\150\057\142\062\112\064\122\001\002" +
    "\000\016\060\uff84\061\uff84\063\uff84\065\uff84\071\uff84\072" +
    "\uff84\001\002\000\032\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\060\uffa8\061\uffa8\063\uffa8\065\uffa8\071" +
    "\uffa8\072\uffa8\001\002\000\006\027\135\030\143\001\002" +
    "\000\016\060\uff92\061\uff92\063\uff92\065\uff92\071\uff92\072" +
    "\uff92\001\002\000\016\060\237\061\240\063\uff8a\065\uff8a" +
    "\071\uff8a\072\uff8a\001\002\000\004\062\235\001\002\000" +
    "\004\062\233\001\002\000\046\027\135\030\143\031\037" +
    "\033\140\034\124\035\144\037\145\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\131\056\150\057\142" +
    "\062\112\064\122\001\002\000\016\060\uff7f\061\uff7f\063" +
    "\uff7f\065\uff7f\071\uff7f\072\uff7f\001\002\000\046\027\135" +
    "\030\143\031\037\033\140\034\124\035\144\037\145\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\131" +
    "\056\150\057\142\062\112\064\122\001\002\000\016\060" +
    "\uff80\061\uff80\063\uff80\065\uff80\071\uff80\072\uff80\001\002" +
    "\000\004\062\243\001\002\000\004\062\241\001\002\000" +
    "\046\027\135\030\143\031\037\033\140\034\124\035\144" +
    "\037\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\131\056\150\057\142\062\112\064\122\001\002" +
    "\000\016\060\uff81\061\uff81\063\uff81\065\uff81\071\uff81\072" +
    "\uff81\001\002\000\046\027\135\030\143\031\037\033\140" +
    "\034\124\035\144\037\145\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\131\056\150\057\142\062\112" +
    "\064\122\001\002\000\016\060\uff82\061\uff82\063\uff82\065" +
    "\uff82\071\uff82\072\uff82\001\002\000\004\065\246\001\002" +
    "\000\046\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\060\uff99\061\uff99\063\uff99\065\uff99\071\uff99\072\uff99\001" +
    "\002\000\046\003\uffd4\007\uffd4\011\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\062\uffd4\067\uffd4" +
    "\001\002\000\046\003\uffd3\007\uffd3\011\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\031\uffd3\062\uffd3\067" +
    "\uffd3\001\002\000\004\064\252\001\002\000\052\027\135" +
    "\030\143\031\037\033\140\034\124\035\144\037\145\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\131" +
    "\056\150\057\142\062\112\063\uffa6\064\122\065\uffa6\001" +
    "\002\000\006\063\255\065\256\001\002\000\006\063\uff94" +
    "\065\uff94\001\002\000\052\027\135\030\143\031\037\033" +
    "\140\034\124\035\144\037\145\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\131\056\150\057\142\062" +
    "\112\063\uffa6\064\122\065\uffa6\001\002\000\050\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\047\uff96\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\056\uff96\060\uff96" +
    "\061\uff96\063\uff96\065\uff96\071\uff96\072\uff96\001\002\000" +
    "\006\063\uff95\065\uff95\001\002\000\044\003\uffe0\007\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031\uffe0" +
    "\062\uffe0\067\uffe0\001\002\000\044\003\103\007\025\011" +
    "\066\013\074\014\070\015\105\017\101\020\077\021\100" +
    "\022\013\023\021\024\016\025\012\026\017\031\037\062" +
    "\112\067\262\001\002\000\010\003\263\012\265\071\264" +
    "\001\002\000\004\067\274\001\002\000\046\003\uffc4\007" +
    "\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\031\uffc4\062\uffc4\067\uffc4\001\002\000\004\066\270" +
    "\001\002\000\004\071\267\001\002\000\046\003\uffc3\007" +
    "\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\031\uffc3\062\uffc3\067\uffc3\001\002\000\044\003\uffcc" +
    "\007\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\031\uffcc\062\uffcc\067\uffcc\001\002\000\044\003\uffe0\007" +
    "\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031" +
    "\uffe0\062\uffe0\067\uffe0\001\002\000\044\003\103\007\025" +
    "\011\066\013\074\014\070\015\105\017\101\020\077\021" +
    "\100\022\013\023\021\024\016\025\012\026\017\031\037" +
    "\062\112\067\273\001\002\000\004\071\uffcb\001\002\000" +
    "\004\071\uffca\001\002\000\044\003\uffe0\007\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031\uffe0\062\uffe0" +
    "\067\uffe0\001\002\000\044\003\103\007\025\011\066\013" +
    "\074\014\070\015\105\017\101\020\077\021\100\022\013" +
    "\023\021\024\016\025\012\026\017\031\037\062\112\067" +
    "\277\001\002\000\004\071\300\001\002\000\046\003\uffbb" +
    "\007\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\031\uffbb\062\uffbb\067\uffbb\001\002\000\010\031" +
    "\037\062\303\063\uffb5\001\002\000\010\063\uffb6\065\uffb3" +
    "\070\327\001\002\000\052\027\135\030\143\031\037\033" +
    "\140\034\124\035\144\037\145\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\131\056\150\057\142\062" +
    "\112\063\uffa6\064\122\065\uffa6\001\002\000\004\065\325" +
    "\001\002\000\004\065\uffb8\001\002\000\004\063\307\001" +
    "\002\000\006\031\037\062\303\001\002\000\010\063\uffb3" +
    "\065\uffb3\070\323\001\002\000\006\063\312\065\uffb9\001" +
    "\002\000\006\031\037\065\uffad\001\002\000\012\045\316" +
    "\046\315\065\uffb0\070\317\001\002\000\004\065\uffba\001" +
    "\002\000\004\071\322\001\002\000\004\071\321\001\002" +
    "\000\050\027\135\030\143\031\037\033\140\034\124\035" +
    "\144\037\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\131\056\150\057\142\062\112\064\122\065" +
    "\uffa6\001\002\000\004\065\uffb1\001\002\000\004\065\uffaf" +
    "\001\002\000\004\065\uffae\001\002\000\052\027\135\030" +
    "\143\031\037\033\140\034\124\035\144\037\145\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\131\056" +
    "\150\057\142\062\112\063\uffa6\064\122\065\uffa6\001\002" +
    "\000\006\063\uffb4\065\uffb4\001\002\000\004\066\uffbc\001" +
    "\002\000\006\063\uffb2\065\uffb2\001\002\000\052\027\135" +
    "\030\143\031\037\033\140\034\124\035\144\037\145\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\131" +
    "\056\150\057\142\062\112\063\uffa6\064\122\065\uffa6\001" +
    "\002\000\006\063\uffb7\065\uffb4\001\002\000\004\010\332" +
    "\001\002\000\004\062\343\001\002\000\042\003\uffe0\007" +
    "\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031" +
    "\uffe0\062\uffe0\001\002\000\006\010\uffbf\067\uffbf\001\002" +
    "\000\006\010\332\067\336\001\002\000\004\071\340\001" +
    "\002\000\006\010\uffc0\067\uffc0\001\002\000\046\003\uffc1" +
    "\007\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\031\uffc1\062\uffc1\067\uffc1\001\002\000\042\003" +
    "\103\007\025\011\066\013\074\014\070\015\105\017\101" +
    "\020\077\021\100\022\013\023\021\024\016\025\012\026" +
    "\017\031\037\062\112\001\002\000\046\003\uffd8\007\uffd8" +
    "\010\uffbd\011\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\031\uffd8\062\uffd8\067\uffbd\001\002\000\050\027\135\030" +
    "\143\031\037\033\140\034\124\035\144\037\145\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\131\056" +
    "\150\057\142\062\112\064\122\072\uffa6\001\002\000\004" +
    "\072\345\001\002\000\042\003\uffbe\007\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\031\uffbe\062\uffbe\001" +
    "\002\000\046\003\uffc6\007\uffc6\011\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\031\uffc6\062\uffc6\067\uffc6" +
    "\001\002\000\044\003\uffe0\007\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\031\uffe0\062\uffe0\067\uffe0\001" +
    "\002\000\044\003\103\007\025\011\066\013\074\014\070" +
    "\015\105\017\101\020\077\021\100\022\013\023\021\024" +
    "\016\025\012\026\017\031\037\062\112\067\351\001\002" +
    "\000\010\003\uffc9\012\uffc9\071\uffc9\001\002\000\050\003" +
    "\uffab\007\uffab\010\uffab\011\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\031\uffab\062\uffab\067\uffab\001\002" +
    "\000\050\027\135\030\143\031\037\033\140\034\124\035" +
    "\144\037\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\131\056\150\057\142\062\112\064\122\065" +
    "\uffa6\001\002\000\004\065\355\001\002\000\004\071\356" +
    "\001\002\000\046\003\uffa9\007\uffa9\011\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\031\uffa9\062\uffa9\067" +
    "\uffa9\001\002\000\004\031\037\001\002\000\004\065\361" +
    "\001\002\000\004\071\362\001\002\000\046\003\uffaa\007" +
    "\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\031\uffaa\062\uffaa\067\uffaa\001\002\000\046\003\uffd5" +
    "\007\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\031\uffd5\062\uffd5\067\uffd5\001\002\000\004\031" +
    "\037\001\002\000\006\070\367\071\366\001\002\000\046" +
    "\003\uffea\007\uffea\011\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\031\uffea\062\uffea\067\uffea\001\002\000" +
    "\050\027\135\030\143\031\037\033\140\034\124\035\144" +
    "\037\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\131\056\150\057\142\062\112\064\122\071\uffa6" +
    "\001\002\000\004\071\371\001\002\000\046\003\uffcf\007" +
    "\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\031\uffcf\062\uffcf\067\uffcf\001\002\000\050\027\135" +
    "\030\143\031\037\033\140\034\124\035\144\037\145\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\131" +
    "\056\150\057\142\062\112\064\122\065\uffa6\001\002\000" +
    "\004\065\374\001\002\000\004\066\uffc5\001\002\000\004" +
    "\031\037\001\002\000\004\065\377\001\002\000\004\066" +
    "\uffc2\001\002\000\046\003\uffc8\007\uffc8\011\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\031\uffc8\062\uffc8" +
    "\067\uffc8\001\002\000\004\071\u0102\001\002\000\046\003" +
    "\uffc7\007\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\031\uffc7\062\uffc7\067\uffc7\001\002\000\050" +
    "\027\135\030\143\031\037\033\140\034\124\035\144\037" +
    "\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\131\056\150\057\142\062\112\064\122\065\uffa6\001" +
    "\002\000\004\065\u0105\001\002\000\004\066\uffcd\001\002" +
    "\000\004\031\037\001\002\000\004\071\366\001\002\000" +
    "\004\062\u010a\001\002\000\004\064\uffe4\001\002\000\014" +
    "\022\013\023\021\024\016\025\012\026\017\001\002\000" +
    "\004\062\u010c\001\002\000\004\031\037\001\002\000\004" +
    "\064\ufff5\001\002\000\044\003\103\007\025\011\066\013" +
    "\074\014\070\015\105\016\u0110\017\101\020\077\021\100" +
    "\022\013\023\021\024\016\025\012\026\017\031\037\062" +
    "\112\001\002\000\004\067\u0115\001\002\000\004\064\u0111" +
    "\001\002\000\050\027\135\030\143\031\037\033\140\034" +
    "\124\035\144\037\145\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\131\056\150\057\142\062\112\064" +
    "\122\065\uffa6\001\002\000\004\065\u0113\001\002\000\004" +
    "\071\u0114\001\002\000\004\067\uffac\001\002\000\022\003" +
    "\ufff3\007\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\062\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\006\003\003\076\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\007" +
    "\001\001\000\020\013\014\016\026\020\017\025\022\062" +
    "\025\063\021\066\010\001\001\000\004\017\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\031\020\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\035\001\001\000\004\015\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\041" +
    "\001\001\000\002\001\001\000\004\004\043\001\001\000" +
    "\004\015\044\001\001\000\002\001\001\000\004\020\046" +
    "\001\001\000\002\001\001\000\004\004\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\057\001\001\000\050\004\114\020\074\021\060\022\106" +
    "\023\072\025\062\037\112\040\070\041\064\044\063\052" +
    "\107\053\061\054\071\060\075\067\101\071\110\072\103" +
    "\074\105\075\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\133\005\135\006\145\007" +
    "\126\011\136\024\140\026\132\030\127\031\120\032\150" +
    "\034\131\035\124\060\122\064\125\065\146\001\001\000" +
    "\002\001\001\000\040\004\133\005\135\006\145\007\126" +
    "\011\136\024\244\026\132\030\127\031\120\032\150\034" +
    "\131\035\124\060\122\064\125\065\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\227\001\001\000" +
    "\002\001\001\000\004\033\225\001\001\000\004\027\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\214\001\001\000\004\033\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\155\005\135\006\145\007\157\011" +
    "\136\030\156\031\120\060\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\151\060\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\161\001\001\000\002\001\001\000\022\004\155\005\135" +
    "\006\145\007\157\011\136\030\201\031\120\060\122\001" +
    "\001\000\002\001\001\000\022\004\155\005\135\006\145" +
    "\007\157\011\136\030\177\031\120\060\122\001\001\000" +
    "\022\004\155\005\135\006\145\007\157\011\136\030\175" +
    "\031\120\060\122\001\001\000\022\004\155\005\135\006" +
    "\145\007\157\011\136\030\173\031\120\060\122\001\001" +
    "\000\022\004\155\005\135\006\145\007\157\011\136\030" +
    "\171\031\120\060\122\001\001\000\022\004\155\005\135" +
    "\006\145\007\157\011\136\030\167\031\120\060\122\001" +
    "\001\000\004\027\170\001\001\000\002\001\001\000\004" +
    "\027\172\001\001\000\002\001\001\000\004\027\174\001" +
    "\001\000\002\001\001\000\004\027\176\001\001\000\002" +
    "\001\001\000\004\027\200\001\001\000\002\001\001\000" +
    "\004\027\202\001\001\000\002\001\001\000\032\004\133" +
    "\005\135\006\145\007\126\011\136\026\205\030\127\031" +
    "\120\032\206\060\122\064\204\065\146\001\001\000\002" +
    "\001\001\000\004\033\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\155\005\135\006" +
    "\145\007\157\011\136\026\216\030\127\031\120\060\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\221\001\001\000\002\001\001\000\032" +
    "\004\133\005\135\006\145\007\126\011\136\026\205\030" +
    "\127\031\120\032\206\060\122\064\223\065\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\133\005\135\006\145\007" +
    "\126\011\136\026\205\030\127\031\120\032\206\035\233" +
    "\060\122\064\125\065\146\001\001\000\002\001\001\000" +
    "\034\004\133\005\135\006\145\007\126\011\136\026\205" +
    "\030\127\031\120\032\206\035\235\060\122\064\125\065" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\133\005\135\006\145\007\126\011" +
    "\136\026\205\030\127\031\120\032\206\035\241\060\122" +
    "\064\125\065\146\001\001\000\002\001\001\000\034\004" +
    "\133\005\135\006\145\007\126\011\136\026\205\030\127" +
    "\031\120\032\206\035\243\060\122\064\125\065\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\133\005\135\006\145\007\126\011\136\024\253" +
    "\026\132\030\127\031\120\032\150\034\131\035\124\060" +
    "\122\061\252\064\125\065\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\133\005\135\006\145\007" +
    "\126\011\136\024\256\026\132\030\127\031\120\032\150" +
    "\034\131\035\124\060\122\064\125\065\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\260\001\001" +
    "\000\050\004\114\020\074\021\060\022\106\023\072\025" +
    "\062\037\112\040\070\041\064\044\063\052\107\053\061" +
    "\054\071\060\075\067\101\071\110\072\103\074\105\075" +
    "\066\001\001\000\004\070\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\270\001\001\000\004\017\271" +
    "\001\001\000\050\004\114\020\074\021\060\022\106\023" +
    "\072\025\062\037\112\040\070\041\064\044\063\052\107" +
    "\053\061\054\071\060\075\067\101\071\110\072\103\074" +
    "\105\075\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\275\001\001\000\050\004\114\020\074\021" +
    "\060\022\106\023\072\025\062\037\112\040\070\041\064" +
    "\044\063\052\107\053\061\054\071\060\075\067\101\071" +
    "\110\072\103\074\105\075\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\301\045\303\046\305\047" +
    "\304\001\001\000\002\001\001\000\040\004\133\005\135" +
    "\006\145\007\126\011\136\024\325\026\132\030\127\031" +
    "\120\032\150\034\131\035\124\060\122\064\125\065\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\307\047\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\312\050\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\133\005\135\006\145\007\126\011" +
    "\136\024\317\026\132\030\127\031\120\032\150\034\131" +
    "\035\124\060\122\064\125\065\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\133" +
    "\005\135\006\145\007\126\011\136\024\323\026\132\030" +
    "\127\031\120\032\150\034\131\035\124\060\122\064\125" +
    "\065\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\133\005\135\006\145\007\126" +
    "\011\136\024\327\026\132\030\127\031\120\032\150\034" +
    "\131\035\124\060\122\064\125\065\146\001\001\000\002" +
    "\001\001\000\010\042\334\043\333\073\332\001\001\000" +
    "\002\001\001\000\004\017\340\001\001\000\002\001\001" +
    "\000\006\043\336\073\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\004\114\020\074" +
    "\021\060\022\106\023\072\025\062\037\112\040\070\041" +
    "\064\044\063\052\341\053\061\054\071\060\075\067\101" +
    "\071\110\072\103\074\105\075\066\001\001\000\002\001" +
    "\001\000\040\004\133\005\135\006\145\007\126\011\136" +
    "\024\343\026\132\030\127\031\120\032\150\034\131\035" +
    "\124\060\122\064\125\065\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\347\001" +
    "\001\000\050\004\114\020\074\021\060\022\106\023\072" +
    "\025\062\037\112\040\070\041\064\044\063\052\107\053" +
    "\061\054\071\060\075\067\101\071\110\072\103\074\105" +
    "\075\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\133\005\135\006\145\007\126\011\136\024\353" +
    "\026\132\030\127\031\120\032\150\034\131\035\124\060" +
    "\122\064\125\065\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\133\005\135\006\145\007\126" +
    "\011\136\024\367\026\132\030\127\031\120\032\150\034" +
    "\131\035\124\060\122\064\125\065\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\133\005\135\006" +
    "\145\007\126\011\136\024\372\026\132\030\127\031\120" +
    "\032\150\034\131\035\124\060\122\064\125\065\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\133" +
    "\005\135\006\145\007\126\011\136\024\u0103\026\132\030" +
    "\127\031\120\032\150\034\131\035\124\060\122\064\125" +
    "\065\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u010a\001\001\000\002\001" +
    "\001\000\004\004\u010c\001\001\000\002\001\001\000\052" +
    "\004\114\020\074\021\060\022\106\023\072\025\062\037" +
    "\112\040\070\041\064\044\063\051\u010e\052\107\053\061" +
    "\054\071\060\075\067\101\071\110\072\103\074\105\075" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\133\005\135\006\145\007\126\011\136\024\u0111\026" +
    "\132\030\127\031\120\032\150\034\131\035\124\060\122" +
    "\064\125\065\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    //Connect this parser to a scanner!
    Lexer lex;
    
    public Sintax(Lexer lex){
        this.lex=lex;
    }

    public void syntax_error(Symbol s){
        System.out.println("Error de Sintaxis: Tipo: Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de Sintaxis Tipo: No-Recuperable " + s.value + " Linea: "+ (s.left+1) + " Columna: " + (s.right+1) + "");
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    //Lista de tablas de símbolos
    
    HashMap<String, ArrayList<String> > listaTablaSimbolos = new HashMap<String, ArrayList<String> >();
    String currentHash = "globalTS";
    String globalHash = "globalTS"; 

    //Lista de Tablas de Simbolos de Función
    HashMap<String, String> tiposTablaSimbolos = new HashMap<String, String>();
    String currentType = ""; 

    

    //StringBuilder para Código de 3-Direcciones
    StringBuffer codigo3D = new StringBuffer();
    int currentTemp = 1;
    int currentFunc = 1;
    int currentVar = 1;
    int currentBloque = 1;
    int cantCierra = 1;
    int currentIf = 1;
    int currentElse = 1;
    int currentSwitch = 1;
    int currentCase = 1;
    int currentWhile= 1;
    int currentFor = 1;
    int currentReturn = 1;
    int currentBreak = 1;
    int currentRead = 1;
    int currentWrite = 1;

    Stack<Integer> stackLlaves = new Stack<>();
    int cantLlaves = 0;
   
    public void imprimirTablaSimbolos(){
        System.out.println("\n\n\n");
        System.out.println("================ Imprimiendo Tabla de Símbolos ================");
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println(">>>Tabla de símbolos: " + key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
        }
        System.out.println("\n================ ============================ ================");
    }

    public void imprimirCodigo3Direcciones(){
        System.out.println("\n\n\n");
        System.out.println("================ Imprimiendo Código de 3 Direcciones ================");
        System.out.println(codigo3D.toString());
        System.out.println("\n================ ============================ ================");
        System.out.println("\n\n\n");
        System.out.println("\n================ Exportando Código de 3 Direcciones ================");    
        String rutaArchivo = "F:/Ronaldo/TEC/Semestre 12 - 2023/Compiladores e Interpretes/Proyectos/Proyecto 1/Local/codigo3D.txt";
        
        try {   
            FileWriter fileWriter = new FileWriter(rutaArchivo); //Crea un FileWriter para escribir en el archivo 
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); //Envuelve el FileWriter en un BufferedWriter,(Nota: al parecer mejora el rendimiento)
            bufferedWriter.write(codigo3D.toString()); //Escribe el contenido del StringBuffer en el archivo
            bufferedWriter.close(); //Se cierra el BufferedWriter y el FileWriter
            fileWriter.close();
            System.out.println("\n>>> Código de 3 Direcciones exportado correctamente. Revise: " + rutaArchivo);

        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    
    


    public String verificarTipoVariable(String var){
        boolean palabraEncontrada = false;
        String[] partesVariable = var.split(":");
        String variable = partesVariable[0];
        String[] partesTablaSimbolos = null;
        String res = "null";
        for (String elemento : listaTablaSimbolos.get(currentHash)) {
            if (elemento.contains(variable.toString())) {              //Si el nombre de la variable está en el currentHash se activa la bandera
                palabraEncontrada = true;
                break;                                                //Sale si encuentra la palabra

            }
        }
        for (String elemento2 : listaTablaSimbolos.get(globalHash)) {
            if (elemento2.contains(variable.toString())) {             //Si el nombre de la variable está en elglobalHash se activa la bandera
                palabraEncontrada = true;
                break;                                          //Sale si encuentra la palabra
            }

        }

        if (!palabraEncontrada ) {                                                          
            System.out.println("Error Semántico: La Variable: <<" + variable.toString() + ">> no existe en el alcance." );
        }else {
            //Si el scope actual (currentHash) existe en la tabla de símbolos
            if (listaTablaSimbolos.containsKey(currentHash)) {
                ArrayList<String> contexto = listaTablaSimbolos.get(currentHash);

                //Buscar la variable en el contexto actual
                for (String entrada : contexto) {
                    if (entrada.contains("Nombre Identificador: " + variable.toString())) {                                                                                                                                      
                        int tipoIndex = entrada.indexOf("Tipo: "); //Se extrae el tipo de dato de la variable
                        String tipoVariable = entrada.substring(tipoIndex + 6);  //6 es la longitud de "Tipo: "
                        partesTablaSimbolos = tipoVariable.split(" ");
                        // Ahora tiene el tipo de la variable
                        //System.out.println("El tipo de " + variable.toString() + " es: " + partesTablaSimbolos[0]);
                        break;  // Sale del ciclo se encuentra la variable la variable
                    }
                }
            } 
            if (listaTablaSimbolos.containsKey(globalHash)) {
                ArrayList<String> contexto = listaTablaSimbolos.get(globalHash);

                //Busca la variable en el contexto global
                for (String entrada : contexto) {
                    if (entrada.contains("Nombre Identificador: " + variable.toString())) {
                        //Encontraste la entrada de la variable
                        //Ahora extrae el tipo
                        int tipoIndex = entrada.indexOf("Tipo: ");
                        String tipoVariable = entrada.substring(tipoIndex + 6);  // 6 es la longitud de "Tipo: "
                        partesTablaSimbolos = tipoVariable.split(" ");    
                        // Ahora tiene el tipo de la variable
                        //System.out.println("El tipo de " + variable.toString() + " es: " + partesTablaSimbolos[0]);
                        break; //Sale del ciclo si encuentra la variable la variable
                    }
                }
            }
            else {
                System.out.println("Error: Variable en Contexto Actual no encontrado en la tabla de símbolos");
            }
            res = partesTablaSimbolos[0];        
            }
         return res;   
    }

public boolean verificarVariableDuplicada(String var){
        String[] partesVariable = var.split(":");
        String variable = partesVariable[0];
        String[] partesTablaSimbolos = null;
        boolean res = false;
        for (String elemento : listaTablaSimbolos.get(currentHash)) {
            if (elemento.contains(variable.toString())) {               //Si el nombre de la variable está en el currentHash se activa la bandera
                res = true;
                break;                                                  //Sale si encuentra la palabra
            }
        }
        for (String elemento2 : listaTablaSimbolos.get(globalHash)) {
            if (elemento2.contains(variable.toString())) {              //Si el nombre de la variable está en elglobalHash se activa la bandera
                res = true;
                break;                                                  //Sale si encuentra la palabra
            }

        }
        return res;   
    }



    public String verificarTipoFuncion(String nombre_funcion){
        String res = "null";
        if(tiposTablaSimbolos.containsKey(nombre_funcion)){
            res = tiposTablaSimbolos.get(nombre_funcion);
        }
        return res;
    }

    public String verificarExpresionRelacional(String expr){
        String res = "";
        switch(expr) {
            case "LESS":
                res = "<";
                break;
            case "LESSEQ":
                res = "<=";
                break;
            case "GREATER":
                res = ">";
                break; 
            case "GREATEREQ":
                res = ">=";
                break; 
            case "EQEQ":
                res = "==";
                break; 
            case "DIFF":
                res = "!=";
                break;    
            default:
              break; 
        }

     return res;

    }

    public String verificarTipoExpresionAritmetica(String it, String c, int currentTemporal){
        String[] partesOperando1 = it.toString().split(":"); 
        String[] partesOperando2 = c.toString().split(":");
        boolean flag = false;
        String tipoOperacion = "null";
        //System.out.println("TipoParte1: " + partesOperando1[1] );
        //System.out.println("TipoParte2: " + partesOperando2[1] );

        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
            flag = true;
        }
        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
            flag = true;
        }

        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
        }else{
            //String miTemp = "t"+currentTemp++;
             String miTemp = "t"+ currentTemporal;
             if(!(partesOperando2[1].equals("Empty"))){
                this.codigo3D.append("\n" + miTemp + "=" + partesOperando1[2] + partesOperando2[0] + "t" + (this.currentTemp - 1));   
                tipoOperacion = partesOperando1[1] + ":" + miTemp ;
                miTemp = "t" + this.currentTemp++;
            }else{
               // miTemp = "t" + this.currentTemp++;;
                tipoOperacion = partesOperando1[1] + ":" + miTemp ; 
            }
        }
        return tipoOperacion;
    }

    public String verificarTipoExpresionAritmeticaDiv(String it, String c, int currentTem){
        String[] partesOperando1 = it.toString().split(":");      
        String[] partesOperando2 = c.toString().split(":");
        boolean flag = false;
        String tipoOperacion = "null";
        //System.out.println("TipoParte1: " + partesOperando1[1] );
        //System.out.println("TipoParte2: " + partesOperando2[1] );
        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
            flag = true;
        }
        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
            flag = true;
        }
        if(partesOperando2[0].equals("0")){
            System.out.println("División entre cero encontrada. Revise el operando." );
            flag = true;
        }

        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
           System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
        }else{
             String miTemp = "t"+ currentTemp;
             if(!(partesOperando2[1].equals("Empty"))){
                this.codigo3D.append("\n" + miTemp + "=" + partesOperando1[2] + partesOperando2[0] + "t" + (this.currentTemp - 1));      
                tipoOperacion = partesOperando1[1] + ":" + miTemp ;
                miTemp = "t" + this.currentTemp++;
            
            }else{
                tipoOperacion = partesOperando1[1] + ":" + miTemp ; 
            }
           
        }
        return tipoOperacion;
    }

    public String verificarTipos(String it, String c){
        String[] partesOperando1 = it.toString().split(":"); 
        String[] partesOperando2 = c.toString().split(":");
        boolean flag = false;
        String tipoOperacion = "null";
        //System.out.println("TipoParte1: " + partesOperando1 );
        //System.out.println("TipoParte2: " + partesOperando2 );
        if(!(partesOperando1[0].equals("Numera") || partesOperando1[0].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1 );
            flag = true;
        }
        if(!(partesOperando2[0].equals("Numera") || partesOperando2[0].equals("NumeraDecimus")  || partesOperando2.equals("Empty"))){  //Si el tipo del segundo operando no es int o float
            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2 );
            flag = true;
        }

        if(!(!flag && (partesOperando2[0].equals(partesOperando1[0]) || partesOperando2[0].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1);
        }else{
              tipoOperacion = partesOperando1[0];

        }
        return tipoOperacion;
    }


  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cola_conjuro_logico ::= OR SPACEGATO conjuro_logico 
            {
              Object RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "|:" + cl.toString();
              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cola_conjuro_logico ::= AND SPACEGATO conjuro_logico 
            {
              Object RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "&:" + cl.toString();
              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cola_conjuro_logico ::= cola_conjuro_logico OR SPACEGATO conjuro_logico 
            {
              Object RESULT = null;
		int colleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		if(!(cl.toString().equals(col.toString()))){
                                                                                                                System.out.println("Error Semántico: Expresiones de <<Ritual Lógico>> Deben ser <<SiNox>>.");
                                                                                                         }else{
                                                                                                            RESULT = "SiNox";
                                                                                                         }
                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cola_conjuro_logico ::= cola_conjuro_logico AND SPACEGATO conjuro_logico 
            {
              Object RESULT = null;
		int colleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 if(!(cl.toString().equals(col.toString()))){
                                                                                                                System.out.println("Error Semántico: Expresiones de <<Ritual Lógico>> Deben ser <<SiNox>>.");
                                                                                                        }else{
                                                                                                            RESULT = "SiNox";
                                                                                                        }
                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(28/*cola_conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // conjuro_logico_negacion ::= NOTC SPACEGATO conjuro_logico_factor 
            {
              Object RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = cf.toString();
              CUP$Sintax$result = new java_cup.runtime.Symbol(51/*conjuro_logico_negacion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // conjuro_logico_negacion ::= NOT SPACEGATO conjuro_logico_factor 
            {
              Object RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = cf.toString();
              CUP$Sintax$result = new java_cup.runtime.Symbol(51/*conjuro_logico_negacion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // conjuro_logico_factor ::= ARROBA invocacion_funcion ARROBA 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		if(n.equals("null")){ //si c es null, mostrar error
                                                                                                            System.out.println("Error Semántico: Tipo de Dato no permitido en Conjuro Logico.  Valor de Función es null."); 
                                                                                                          }else{
                                                                                                            RESULT = n.toString()+":tx";

                                                                                                         } 
                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(50/*conjuro_logico_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // conjuro_logico_factor ::= conjuro_relacional 
            {
              Object RESULT = null;
		int crleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int crright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		if(cr.equals("null")){ //si c es null, mostrar error
                                                                                                            System.out.println("Error Semántico: Tipo de Dato no permitido en Conjuro Logico.  Valor de Expresión Relacional es null."); 
                                                                                                         }else{

                                                                                                            RESULT = cr.toString();

                                                                                                         } 
                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(50/*conjuro_logico_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // conjuro_logico_factor ::= ARROBA nombre_ingrediente ARROBA 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                                                        //System.out.println("Tipo de N:"+verificarTipoVariable(n.toString())); 
                                                                                                        if(!(verificarTipoVariable(n.toString()).equals("SiNox"))){
                                                                                                            System.out.println("Error Semántico: Tipo de Dato no permitido en Conjuro Logico. Debe ser <<SiNox>>");
                                                                                                        }else{

                                                                                                            String miTemp = "t"+currentTemp++;
                                                                                                            codigo3D.append("\n" + miTemp + "=" + n.toString());
                                                                                                            RESULT = "SiNox:" + miTemp;         
                                                                                                        }
                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(50/*conjuro_logico_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // conjuro_logico_factor ::= conjuro_logico_negacion 
            {
              Object RESULT = null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = cn.toString();
              CUP$Sintax$result = new java_cup.runtime.Symbol(50/*conjuro_logico_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // conjuro_logico ::= conjuro_logico_factor 
            {
              Object RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = cf.toString();
              CUP$Sintax$result = new java_cup.runtime.Symbol(27/*conjuro_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ritual_logico ::= conjuro_logico cola_conjuro_logico 
            {
              Object RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		
                                                                                                        String[] partescol = col.toString().split(":");     //[0]: operador, [1]:tipo, [2]:Registrotemporal
                                                                                                        String[] partescl = cl.toString().split(":");     //[0]:tipo, [1]:temporal
                                                                                                        if(!(partescl[0].toString().equals(partescol[1].toString()))){
                                                                                                               System.out.println("Error Semántico: Expresiones de <<Ritual Lógico>> Deben ser <<SiNox>>.");
                                                                                                        }else{  

                                                                                                               String miTemp = "t" + currentTemp++;
                                                                                                               codigo3D.append("\n" + miTemp + "=" + partescl[1].toString() + partescol[0].toString() + partescol[2].toString()); 
                                                                                                               RESULT = partescl[0].toString() + ":"+ miTemp; 
                                                                                                        }
                                                                                                       
              CUP$Sintax$result = new java_cup.runtime.Symbol(26/*ritual_logico*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // encantamiento_relacional ::= DIFF 
            {
              Object RESULT = null;
		 RESULT = "DIFF"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // encantamiento_relacional ::= EQEQ 
            {
              Object RESULT = null;
		 RESULT = "EQEQ"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // encantamiento_relacional ::= GREATEREQ 
            {
              Object RESULT = null;
		 RESULT = "GREATEREQ"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // encantamiento_relacional ::= GREATER 
            {
              Object RESULT = null;
		 RESULT = "GREATER"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // encantamiento_relacional ::= LESSEQ 
            {
              Object RESULT = null;
		 RESULT = "LESSEQ"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // encantamiento_relacional ::= LESS 
            {
              Object RESULT = null;
		 RESULT = "LESS"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(25/*encantamiento_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // conjuro_relacional ::= nombre_ingrediente encantamiento_relacional nombre_ingrediente 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		String tipoN1 = verificarTipoVariable(n1.toString());
                                                                                                            String tipoN2 = verificarTipoVariable(n2.toString());
                                                                                                            String signo = verificarExpresionRelacional(e.toString());
                                                                                                            if(!(tipoN1.equals(tipoN2))){
                                                                                                                System.out.println("Error Semántico: Valor de las variables deben ser del mismo tipo.");
                                                                                                            }else{
                                                                                                                RESULT = tipoN1 + ":tX"; //RESULT = " :"+ tipoN1; ":tX" se debe cambiar al valor de la variable
                                                                                                                //Codigo 3-D
                                                                                                                String[] Tempn1 = n1.toString().split(":");
                                                                                                                String[] Tempn2 = n2.toString().split(":");
                                                                                                                String miTemp = "t"+currentTemp;
                                                                                                                codigo3D.append("\n" + miTemp + "=" + Tempn1[0] + signo + Tempn2[0]);     
                                                                                                            }  
                                                                                                            
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // conjuro_relacional ::= SiNox encantamiento_relacional SiNox 
            {
              Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		String signo = verificarExpresionRelacional(e.toString());
                                                                                                              if(!(signo.equals("==") || signo.equals("!=")) ){
                                                                                                                System.out.println("Error Semántico: Sinox no admite este operador."); 
                                                                                                             }else{
                                                                                                                if(!(s1.toString().equals("True") || s1.toString().equals("False") || s2.toString().equals("True") || s2.toString().equals("False")) ){
                                                                                                                    System.out.println("Error Semántico: Sinox no admite este operando."); 
                                                                                                                }else{
                                                                                                                    
                                                                                                                    RESULT = "SiNox" + ":tX";; 
                                                                                                                }
                                                                                                             }               
                                                                                                          
              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // conjuro_relacional ::= conjuro_arcano encantamiento_relacional conjuro_arcano 
            {
              Object RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		
                                                                                                            String tipo = verificarTipos(c1.toString(),c2.toString());
                                                                                                            String signo = verificarExpresionRelacional(e.toString());
                                                                                                            if(!(tipo.equals("Numera") || tipo.equals("NumeraDecimus"))){
                                                                                                                System.out.println("Error Semántico: Expresiones deben ser del mismo tipo.");
                                                                                                            }else{
                                                                                                                
                                                                                                                //System.out.println("AQUI VOYYYY:" + signo + ":SiNox");
                                                                                                                RESULT = "SiNox"+ ":t" + (currentTemp); //RESULT = " :"+ tipo;
 
                                                                                                                //Codigo 3-D
                                                                                                                String[] Tempc1 = c1.toString().split(":");
                                                                                                                String[] Tempc2 = c2.toString().split(":");
                                                                                                                String miTemp = "t"+currentTemp++;
                                                                                                                codigo3D.append("\n" + miTemp + "=" + Tempc1[1] + signo + Tempc2[1]);     
                                                                                                            }                        
                                                                                                            
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(24/*conjuro_relacional*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // encantos ::= encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(47/*encantos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // encantos ::= encantos COMMA encanto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(47/*encantos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // invocacion_funcion ::= SPACEGATO nombre_ingrediente PARENL encantos PARENR 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		  String res = verificarTipoFuncion(n.toString());
                                                                                                            if(res.equals("null")){
                                                                                                              System.out.println("Error Semántico: Función: <<" + n.toString() + ">> aún no está declarada.");
                                                                                                            }else{
                                                                                                                RESULT = res + ":" + n.toString() ; 
                                                                                                            }
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(46/*invocacion_funcion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // invocacion_factor ::= invocacion_funcion 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		  String[] partesFuncion = f.toString().split(":"); //[0]: Tipo y [1]:Nombre
                                                                                            //Codigo 3-D
                                                                                            String miTemp = "t"+currentTemp++;
                                                                                            codigo3D.append("\n" + miTemp + "=" + partesFuncion[1].toString()); 
                                                                                            RESULT = " :" + partesFuncion[0].toString() + ":" ;     
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // invocacion_factor ::= Runas 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		  //Codigo 3-D
                                                                                            String miTemp = "t"+currentTemp++;
                                                                                            codigo3D.append("\n" + miTemp + "=" + r.toString()); 
                                                                                            RESULT = r + ":Runas:" + miTemp;            
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // invocacion_factor ::= PARENL encanto PARENR 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = " :"+ e.toString();                       
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // invocacion_factor ::= SiNox 
            {
              Object RESULT = null;
		int snleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object sn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 
                                                                                            //Codigo 3-D
                                                                                            String miTemp = "t"+currentTemp++;
                                                                                            codigo3D.append("\n" + miTemp + "=" + sn.toString()); 
                                                                                            RESULT = sn + ":SiNox:" + miTemp;           
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // invocacion_factor ::= NumeraDecimus 
            {
              Object RESULT = null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		
                                                                                            //Codigo 3-D
                                                                                            String miTemp = "t"+currentTemp++;
                                                                                            codigo3D.append("\n" + miTemp + "=" + nd.toString()); 
                                                                                            RESULT = nd + ":NumeraDecimus:" + miTemp;   
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // invocacion_factor ::= Numera 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 
                                                                                            //Codigo 3-D
                                                                                            String miTemp = "t"+currentTemp++;
                                                                                            codigo3D.append("\n" + miTemp + "=" + n.toString());                                                                                      
                                                                                            RESULT = n  + ":Numera:" + miTemp;          
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // invocacion_factor ::= nombre_ingrediente 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		  String tipoVariable = verificarTipoVariable(n.toString()) + ":t" +currentTemp; 
                                                                                            RESULT = tipoVariable;
                                                                                            
                                                                                            //Codigo 3-D
                                                                                            String miTemp = "t"+currentTemp++;
                                                                                            codigo3D.append("\n" + miTemp + "=" + n.toString());                                                                                      
                                                                                            RESULT = n  + ":" + tipoVariable + ":" + miTemp;         
                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(23/*invocacion_factor*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // invocacion_term ::= invocacion_factor 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = f; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(22/*invocacion_term*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // conjuro_arcano_prima ::= 
            {
              Object RESULT = null;
		RESULT = "x:Empty:"+ (currentTemp-1); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // conjuro_arcano_prima ::= POW invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "^:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString(),currentTemp); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conjuro_arcano_prima ::= MOD invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "%:"  + verificarTipoExpresionAritmeticaDiv(it.toString(),c.toString(),currentTemp); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // conjuro_arcano_prima ::= DIV invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "/:"  + verificarTipoExpresionAritmeticaDiv(it.toString(),c.toString(),currentTemp); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // conjuro_arcano_prima ::= MUL invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "*:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString(),currentTemp); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // conjuro_arcano_prima ::= MINUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "-:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString(),currentTemp); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // conjuro_arcano_prima ::= PLUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "+:"  + verificarTipoExpresionAritmetica(it.toString(),c.toString(),currentTemp); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(21/*conjuro_arcano_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // conjuro_arcano ::= 
            {
              Object RESULT = null;
		RESULT = "Empty"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // conjuro_arcano ::= MINUS invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		           
                                                                                        String[] partesOperando1 = it.toString().split(":"); 
                                                                                        String[] partesOperando2 = c.toString().split(":");
                                                                                        boolean flag = false;
                                                                                        String tipoOperacion = "null";
                                                                                        //System.out.println("TipoParte1: " + it.toString() );
                                                                                        //System.out.println("TipoParte2: " + c.toString() );
                                                                                        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus"))){  //Si el tipo del primer operando no es int o float
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
                                                                                            flag = true;
                                                                                        }
                                                                                        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float o vacio
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
                                                                                            flag = true;
                                                                                        }

                                                                                        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
                                                                                            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
                                                                                        }else{
                                                                                            String miTemp = "t" + currentTemp;
                                                                                              if(!(partesOperando2[1].equals("Empty"))){                                                                                              
                                                                                                this.codigo3D.append("\n" + miTemp + "=" + partesOperando1[2] + partesOperando2[0] + "t" + (currentTemp - 1));   
                                                                                                //System.out.println("MiTEMp:" + miTemp);
                                                                                                tipoOperacion = partesOperando1[1] + ":" + miTemp ;
                                                                                                miTemp = "t" + currentTemp++;
                                                                                            }else{
                                                                                                
                                                                                                tipoOperacion = partesOperando1[1] + ":t" + (currentTemp - 1) ;
                                                                                            }
                                                                                          }
                                                                                           
                                                                                        
                                                                                        //System.out.println("====>Tipo de la Operación Combinada: " + tipoOperacion);
                                                                                        RESULT = tipoOperacion; 
                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // conjuro_arcano ::= invocacion_term conjuro_arcano_prima 
            {
              Object RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		           
                                                                                        String[] partesOperando1 = it.toString().split(":"); 
                                                                                        String[] partesOperando2 = c.toString().split(":");
                                                                                        boolean flag = false;
                                                                                        String tipoOperacion = "null";
                                                                                        //System.out.println("TipoParte1: " + it.toString() );
                                                                                        //System.out.println("TipoParte2: " + c.toString() );
                                                                                        if(!(partesOperando1[1].equals("Numera") || partesOperando1[1].equals("NumeraDecimus")|| (partesOperando1[1].equals("SiNox") && partesOperando2[1].equals("Empty")) || (partesOperando1[1].equals("Runas") && partesOperando2[1].equals("Empty")) || (partesOperando1[1].equals("Runa") && partesOperando2[1].equals("Empty")))){  //Si el tipo del primer operando no es int o float o no cumple que el primer operando sea un Bool y el segundo un Empty
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando1[0] );
                                                                                            flag = true;
                                                                                        }
                                                                                        if(!(partesOperando2[1].equals("Numera") || partesOperando2[1].equals("NumeraDecimus")  || partesOperando2[1].equals("Empty"))){  //Si el tipo del segundo operando no es int o float o vacio
                                                                                            System.out.println("Operando Inválido, no es Int o Float, Revise:" + partesOperando2[0] );
                                                                                            flag = true;
                                                                                        }

                                                                                        if(!(!flag && (partesOperando2[1].equals(partesOperando1[1]) || partesOperando2[1].equals("Empty")) )){  //Si ambos tipos no son iguales o el segundo operando no es vacío
                                                                                            System.out.println("Operandos Inválidos, Deben ser del mismo tipo. Revise el operando:" + partesOperando1[0]);
                                                                                        }else{
                                                                                            String miTemp = "t" + currentTemp;
                                                                                              if(!(partesOperando2[1].equals("Empty"))){  
                                                                                                
                                                                                                this.codigo3D.append("\n" + miTemp + "=" + partesOperando1[2] + partesOperando2[0] + "t" + (currentTemp - 1));   
                                                                                               // System.out.println("MiTEMp:" + miTemp);
                                                                                                tipoOperacion = partesOperando1[1] + ":" + miTemp ;
                                                                                                miTemp = "t" + currentTemp++;
                                                                                            }else{
                                                                                                
                                                                                                tipoOperacion = partesOperando1[1] + ":t" + (currentTemp - 1) ;
                                                                                            }
                                                                                          }
                                                                                           
                                                                                        
                                                                                        //System.out.println("====>Tipo de la Operación Combinada: " + tipoOperacion);
                                                                                        RESULT = tipoOperacion; 
                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(20/*conjuro_arcano*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conjuro_escribir ::= ESCRIBIO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  String[] partesEncanto = e.toString().split(":");
                                                                                if(!(partesEncanto[0].toString().equals("Runas"))){
                                                                                    System.out.println("Error Semántico: Tipo de Valor no permitido en <<Conjuro Escribir>>.");
                                                                                }else{                                                                                   
                                                                                    codigo3D.append("\n" + "SYSCALL READ " + partesEncanto[1]);  
                                                                                }

                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(42/*conjuro_escribir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // conjuro_leer ::= RECITA PARENL nombre_ingrediente PARENR DOTCOMMA 
            {
              Object RESULT = null;
		 //Codigo 3-D
                                                                               String miTemp = "t"+currentTemp;
                                                                               codigo3D.append("\n" + "SYSCALL READ " + miTemp);                                                                                      
   
                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(41/*conjuro_leer*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conjuro_confractus ::= CONFRACTA DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(40/*conjuro_confractus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conjuro_revertir ::= RIVIERTO PARENL encanto PARENR DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		RESULT = e.toString(); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(39/*conjuro_revertir*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // paso ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paso ::= nombre_ingrediente MINUSMINUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paso ::= nombre_ingrediente PLUSPLUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paso ::= nombre_ingrediente 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = verificarTipoVariable(n.toString());
              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // paso ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 String[] partesEncanto = en.toString().split(":");
                                                                                                                      if(!(partesEncanto[0].toString().equals("Numera"))){
                                                                                                                            System.out.println("Error Semántico: Tipo de Variable y Valor asignado no coinciden.");
                                                                                                                        }else{
                                                                                                                            //Código 3-D
                                                                                                                            codigo3D.append("\n" + "data_" + "Numera" + " " + n.toString());      
                                                                                                                            codigo3D.append("\n" + n.toString() + "=" +  partesEncanto[1].toString());
                                                                                                                            RESULT = en.toString();
                                                                                                                        } 
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(38/*paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fin ::= SPACEGATO encanto 
            {
              Object RESULT = null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 String[] partesEncanto = en.toString().split(":");
                                                                                                                      if(!(partesEncanto[0].toString().equals("SiNox"))){
                                                                                                                            System.out.println("Error Semántico: Tipo de Variable y Valor asignado no coinciden.");
                                                                                                                        }else{
                                                                                                                            //Código 3-D
                                                                                                                            codigo3D.append("\n" + "data_" + "SiNox" + " " + "fin");      
                                                                                                                            codigo3D.append("\n" + "fin" + "=" +  partesEncanto[1].toString());
                                                                                                                            RESULT = en.toString();
                                                                                                                        } 
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(37/*fin*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fin ::= nombre_ingrediente 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = verificarTipoVariable(n.toString());
              CUP$Sintax$result = new java_cup.runtime.Symbol(37/*fin*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fin ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 String[] partesEncanto = en.toString().split(":");
                                                                                                                      if(!(partesEncanto[0].toString().equals("SiNox"))){
                                                                                                                            System.out.println("Error Semántico: Tipo de Variable y Valor asignado no coinciden.");
                                                                                                                        }else{
                                                                                                                            //Código 3-D
                                                                                                                            codigo3D.append("\n" + "data_" + "SiNox" + " " + n.toString());      
                                                                                                                            codigo3D.append("\n" + n.toString() + "=" +  partesEncanto[1].toString());
                                                                                                                            RESULT = en.toString();
                                                                                                                        } 
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(37/*fin*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicio ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // inicio ::= nombre_ingrediente 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = verificarTipoVariable(n.toString());
              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // inicio ::= nombre_ingrediente ASSIGN encanto 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 String[] partesEncanto = en.toString().split(":");   //[0]:Tipo, [1]:Temporal
                                                                                                                      if(!(partesEncanto[0].toString().equals("Numera"))){
                                                                                                                            System.out.println("Error Semántico: Tipo de Variable y Valor asignado no coinciden.");
                                                                                                                        }else{
                                                                                                                            //Código 3-D
                                                                                                                            codigo3D.append("\n" + "data_" + "Numera" + " " + n.toString());      
                                                                                                                            codigo3D.append("\n" + n.toString() + "=" +  partesEncanto[1].toString());
                                                                                                                            RESULT = en.toString();
                                                                                                                        }    
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(36/*inicio*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicio_fin_paso ::= fin 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		String[] partesEncantoFinal = f.toString().split(":");                                                                                                                     
                                                                                                                        if(!(partesEncantoFinal[0].equals("SiNox"))){
                                                                                                                            System.out.println("Error Semántico: Conjuro-Para no permite estos tipos de datos:" + partesEncantoFinal[0]);;
                                                                                                                        }else{
                                                                                                                            //Codigo 3-D
                                                                                                                            String miTemp = "t"+currentTemp++;
                                                                                                                            codigo3D.append("\n" + miTemp + "=0");                                                                                                                              
                                                                                                                            RESULT = miTemp + ":" + partesEncantoFinal[1];
                                                                                                                        }
                                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicio_fin_paso ::= inicio COMMA fin 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		String[] partesEncantoInicio = i.toString().split(":");                                                                                                                   
                                                                                                                     String[] partesEncantoFinal = f.toString().split(":");
                                                                                                                     if(!(partesEncantoInicio[0].equals("Numera") || partesEncantoFinal[0].equals("SiNox"))){
                                                                                                                        System.out.println("Error Semántico: Conjuro-Para no permite estos tipos de datos:" + partesEncantoInicio[0] + " y:  " + partesEncantoFinal[0]);
                                                                                                                     }else{
                                                                                                                            RESULT = partesEncantoInicio[1] + ":" + partesEncantoFinal[1];
                                                                                                                     }
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicio_fin_paso ::= inicio COMMA fin COMMA paso 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		String[] partesEncantoInicio = i.toString().split(":");
                                                                                                                     String[] partesEncantoFinal = f.toString().split(":");
                                                                                                                     String[] partesEncantoPaso = p.toString().split(":"); 
                                                                                                                    if(!(partesEncantoInicio[0].equals("Numera") || partesEncantoFinal[0].equals("SiNox") || partesEncantoPaso[0].equals("Numera"))){
                                                                                                                        System.out.println("Error Semántico: Conjuro-Para no permite estos tipos de datos: Inicio:" + partesEncantoInicio[0] + " ,Fin:  " + partesEncantoFinal[0] + " ,Paso: " + partesEncantoPaso[0]);
                                                                                                                    }else{
                                                                                                                        RESULT = partesEncantoInicio[1] + ":" + partesEncantoFinal[1];
                                                                                                                    }
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(35/*inicio_fin_paso*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conjuro_para ::= conjuro_para_encabezado KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;
		 //Creación de Codigo 3-D
                                                                                                                    int contadorfinal = stackLlaves.pop();
                                                                                                                    codigo3D.append("\n" +"final_bloque_FOR_" + contadorfinal +":");                                                                                                                  
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(34/*conjuro_para*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conjuro_para_encabezado ::= PARARANGUS PARENL inicio_fin_paso PARENR 
            {
              Object RESULT = null;
		int ifpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ifpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ifp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		String[] partesEncanto = ifp.toString().split(":"); //[0]:Temporal Inicio, [1]:Temporal Final
                                                                                                                    //Creación de Codigo 3-D
                                                                                                                      stackLlaves.push(currentFor);   
                                                                                                                      codigo3D.append("\n" +"IF " + partesEncanto[1] + " GOTO final_bloque_FOR_" + (cantCierra++) +":");
                                                                                                                      codigo3D.append("\n" + "GOTO inicio_bloque_FOR_"+ currentWhile +":");
                                                                                                                      codigo3D.append("\n" +"inicio_bloque_FOR_" + (currentFor++) +":");  
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(58/*conjuro_para_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // caso_switch ::= caso_switch_encabezado conjuros conjuro_confractus 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  //Creación de Codigo 3-D
                                                                                                            int contadorfinal = stackLlaves.pop();
                                                                                                            codigo3D.append("\n" +"final_bloque_CASE_" + contadorfinal +":");
                                                                                                            RESULT = e;
                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(33/*caso_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // caso_switch_encabezado ::= SIAPARECE SPACEGATO encanto DOUBLEDOT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		String[] partesEncanto = e.toString().split(":");
                                                                                                        
                                                                                                         //Creación de Codigo 3-D 
                                                                                                          stackLlaves.push(currentCase);   
                                                                                                          codigo3D.append("\n" +"IF " + partesEncanto[1] + " GOTO inicio_bloque_CASE_"+ currentCase +":");
                                                                                                          codigo3D.append("\n" +"GOTO final_bloque_CASE_" + (cantCierra++) +":");
                                                                                                          codigo3D.append("\n" +"inicio_bloque_CASE_" + (currentCase++) +":");                                                                                                                     
                                                                                                                       
                                                                                                         RESULT = partesEncanto[0];
                                                                                                        
              CUP$Sintax$result = new java_cup.runtime.Symbol(57/*caso_switch_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // casos_switch ::= caso_switch 
            {
              Object RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = cs;
              CUP$Sintax$result = new java_cup.runtime.Symbol(32/*casos_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT = null;
		int cs1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cs1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cs2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cs2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cs2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		if(!(cs1.toString().equals(cs2.toString()))){
                                                                                                            System.out.println("Error Semántico: Tipos de Dato en Casos SiAparece deben ser iguales.");
                                                                                                         }else{
                                                                                                             RESULT = cs1;
                                                                                                         }
                                                                                                         
              CUP$Sintax$result = new java_cup.runtime.Symbol(32/*casos_switch*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conjuro_mutacion ::= conjuro_mutacion_encabezado KEYL casos_switch KEYR DOTCOMMA 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 if(!(verificarTipoVariable(n.toString()).equals(cs.toString()))){
                                                                                                                            System.out.println("Error Semántico: Tipo de Variable y Valor de SiAparece no coinciden.");
                                                                                                                        }else{
                                                                                                                            //Creación de Codigo 3-D
                                                                                                                            int contadorfinal = stackLlaves.pop();
                                                                                                                            codigo3D.append("\n" +"final_bloque_SWITCH_" + contadorfinal +":");
                                                                                                                        }
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(31/*conjuro_mutacion*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conjuro_mutacion_encabezado ::= MUTACION PARENL nombre_ingrediente PARENR 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //Creación de Codigo 3-D
                                                                                                                      stackLlaves.push(currentSwitch);   
                                                                                                                      codigo3D.append("\n" +"inicio_bloque_SWITCH_" + (currentSwitch++) +":");   
                                                                                                                      RESULT = n;
                                                                                                                   
              CUP$Sintax$result = new java_cup.runtime.Symbol(56/*conjuro_mutacion_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conjuro_mientras ::= conjuro_mientras_encabezado KEYL conjuros KEYR conjuro_sino DOTCOMMA 
            {
              Object RESULT = null;
		//Creación de Codigo 3-D
                                                                                                              int contadorfinal = stackLlaves.pop();     
                                                                                                              codigo3D.append("\n" +"final_bloque_ELSE" + contadorfinal +":");
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conjuro_mientras ::= conjuro_mientras_encabezado KEYL conjuros KEYR DOTCOMMA 
            {
              Object RESULT = null;
		//Creación de Codigo 3-D
                                                                                                              int contadorfinal = stackLlaves.pop();
                                                                                                              codigo3D.append("\n" +"final_bloque_WHILE_" + contadorfinal +":");
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(30/*conjuro_mientras*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conjuro_mientras_encabezado ::= MIENTRAS PARENL encanto PARENR 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		String[] partesEncanto = e.toString().split(":");                                                                                                               
                                                                                                                  if(!(partesEncanto[0].equals("SiNox"))){
                                                                                                                    System.out.println("Error Semántico: Expresión del <<Conjuro Si>> Debe ser <<SiNox>>.");
                                                                                                                  }else{                                                                                                                   
                                                                                                                     //Creación de Codigo 3-D
                                                                                                                      stackLlaves.push(currentWhile);   
                                                                                                                      codigo3D.append("\n" +"IF " + partesEncanto[1] + " GOTO inicio_bloque_While_"+ currentWhile +":");
                                                                                                                      codigo3D.append("\n" +"GOTO final_bloque_WHILE_" + (cantCierra++) +":");
                                                                                                                      codigo3D.append("\n" +"inicio_bloque_WHILE_" + (currentWhile++) +":");                                                                                                                     
                                                                                                                    }                                                                                                            
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(55/*conjuro_mientras_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conjuro_si ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conjuro_si ::= conjuro_si_encabezado_prima conjuro_sino DOTCOMMA 
            {
              Object RESULT = null;
		//Creación de Codigo 3-D
                                                                                                                   int contadorfinal = stackLlaves.pop();     
                                                                                                                   codigo3D.append("\n" +"final_bloque_ELSE" + contadorfinal +":");
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conjuro_si ::= conjuro_si_encabezado_prima DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(29/*conjuro_si*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conjuro_si_encabezado_prima ::= conjuro_si_encabezado KEYL conjuros KEYR 
            {
              Object RESULT = null;
		//Creación de Codigo 3-D
                                                                                                                   int contadorfinal = stackLlaves.pop();
                                                                                                                   codigo3D.append("\n" +"final_bloque_IF_" + contadorfinal +":");
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(59/*conjuro_si_encabezado_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conjuro_sino ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(54/*conjuro_sino*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conjuro_sino ::= SINO KEYL NT$1 conjuros KEYR 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(54/*conjuro_sino*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$1 ::= 
            {
              Object RESULT = null;
//Creación de Codigo 3-D
                           stackLlaves.push(currentElse);
                           codigo3D.append("\n" +"GOTO inicio_bloque_ELSE" + (currentElse) +":");
                           codigo3D.append("\n" +"inicio_bloque_ELSE" + (currentElse++) +":");                                                                                       
                           
              CUP$Sintax$result = new java_cup.runtime.Symbol(61/*NT$1*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conjuro_si_encabezado ::= SI PARENL encanto PARENR 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		String[] partesEncanto = e.toString().split(":");                                                                                                               
                                                                                                                  if(!(partesEncanto[0].equals("SiNox"))){
                                                                                                                    System.out.println("Error Semántico: Expresión del <<Conjuro Si>> Debe ser del Tipo <<SiNox>>.");
                                                                                                                  }else{
                                                                                                                    
                                                                                                                     //Creación de Codigo 3-D
                                                                                                                      stackLlaves.push(currentIf);   
                                                                                                                      codigo3D.append("\n" +"IF " + partesEncanto[1] + " GOTO inicio_bloque_IF_"+ currentIf+":");
                                                                                                                      codigo3D.append("\n" +"GOTO final_bloque_IF_" + (cantCierra++) +":");
                                                                                                                      codigo3D.append("\n" +"inicio_bloque_IF_" + (currentIf++) +":");
                                                                                                                    }                                                                                                          
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(53/*conjuro_si_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enlace_encanto ::= nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                                                                                                                    String[] partesOperando = en.toString().split(":");                                                                                                                   
                                                                                                                    if(!(verificarTipoVariable(n.toString()).equals(partesOperando[0].toString()))){
                                                                                                                        System.out.println("Error Semántico: Tipo de Variable y Valor asignado no coinciden.");
                                                                                                                    }else{
                                                                                                                        //Código 3-D
                                                                                                                        
                                                                                                                        codigo3D.append("\n" + n.toString() + "=" +  partesOperando[1].toString());
                                                                                                                    }                                                                                                                  
                                                                                                                 
              CUP$Sintax$result = new java_cup.runtime.Symbol(17/*enlace_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // invocacion_encanto ::= esencia SPACEGATO nombre_ingrediente ASSIGN encanto DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 String[] partesOperando = en.toString().split(":"); 
                                                                                                                  if(!(e.toString().equals(partesOperando[0]))){
                                                                                                                    System.out.println("Error Semántico: Tipo de Variable y Valor asignado no coinciden.");
                                                                                                                    //System.out.println("PARTESOPERANDO-1:"+partesOperando[1]);
                                                                                                                  }else{
                                                                                                                        //Verificar si está duplicada
                                                                                                                        boolean res = verificarVariableDuplicada(n.toString());
                                                                                                                        //System.out.println("REEEES2:" + res);                                                                                                                     
                                                                                                                        if(res == true){
                                                                                                                           System.out.println("Error Semántico: Variable: <<" + n.toString()+ ">> ya se encuentra declarada.");
                                                                                                                        }else{
                                                                                                                            listaTablaSimbolos.get(currentHash).add("Tipo: " + e.toString() + " Nombre Identificador: " + n.toString());
                                                                                                                            //Código 3-D
                                                                                                                            //System.out.println("CACACACAACACA:" + en.toString()); 
                                                                                                                            codigo3D.append("\n" + "data_" + e.toString() + " " + n.toString());
                                                                                                                            codigo3D.append("\n" + n.toString() + "=" +  partesOperando[1].toString());

                                                                                                                        }                                                                  
                                                                                                                  }
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(16/*invocacion_encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // encanto ::= ritual_logico 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		if(r.equals("null")){ //si c es null, mostrar error
                                                                                                                    System.out.println("Error Semántico: Valor de Expresión Lógica es null."); 
                                                                                                                 }else{
                                                                                                                    //System.out.println("::::::>" + r.toString()); 
                                                                                                                    RESULT = r;
                                                                                                                 }
                                                                                                                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // encanto ::= conjuro_relacional 
            {
              Object RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		if(c1.equals("null")){ //si c es null, mostrar error
                                                                                                                    System.out.println("Error Semántico: Valor de Expresión Relacional es null."); 
                                                                                                                 }else{
                                                                                                                    //System.out.println("::::::>" + c1.toString()); 
                                                                                                                    RESULT = c1;
                                                                                                                 } 
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // encanto ::= conjuro_arcano 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		if(c.equals("null") || c == null){ //si c es null, mostrar error
                                                                                                                    System.out.println("Error Semántico: Valor de Expresión Aritmética es nulo."); 
                                                                                                                }else{
                                                                                                                    //System.out.println("///////////////////////" + c.toString()); 
                                                                                                                     
                                                                                                                    RESULT = c;
                                                                                                                }  
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(18/*encanto*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conjuro ::= nombre_ingrediente MINUSMINUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conjuro ::= nombre_ingrediente PLUSPLUS DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conjuro ::= invocacion_funcion DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conjuro ::= conjuro_escribir 
            {
              Object RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conjuro ::= conjuro_leer 
            {
              Object RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conjuro ::= conjuro_confractus 
            {
              Object RESULT = null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conjuro ::= conjuro_para 
            {
              Object RESULT = null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // conjuro ::= conjuro_mientras 
            {
              Object RESULT = null;
		int cmileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cmiright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cmi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conjuro ::= conjuro_mutacion 
            {
              Object RESULT = null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conjuro ::= conjuro_si 
            {
              Object RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conjuro ::= enlace_encanto 
            {
              Object RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conjuro ::= invocacion_encanto 
            {
              Object RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conjuro ::= creacion_ingredientes 
            {
              Object RESULT = null;
		int Cileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int Ciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object Ci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;

              CUP$Sintax$result = new java_cup.runtime.Symbol(15/*conjuro*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conjuros ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conjuros ::= conjuros conjuro 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*conjuros*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // hechizo_principal ::= error KEYR 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*hechizo_principal*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // hechizo_principal ::= hechizo_principal_encabezado PARENL PARENR KEYL conjuros KEYR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                                                            //Creación de Codigo 3-D
                                                                                                            codigo3D.append("\n" +"final_bloque_main:");
                                                                                                            codigo3D.append("\n" +"final_func_main:");    
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*hechizo_principal*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // hechizo_principal_encabezado ::= SPACEGATO HECHIZOPRINCIPAL 
            {
              Object RESULT = null;
		
                                                                                                            //System.out.println("Inicio de Main + n.toString()");
                                                                                                            ArrayList<String> lista = new ArrayList<String>();
                                                                                                            currentHash = "Main";
                                                                                                            String tipoTabla = "Main";
                                                                                                            lista.add(tipoTabla);
                                                                                                            listaTablaSimbolos.put(currentHash, lista);

                                                                                                            //Codigo 3-D
                                                                                                            //currentTemp=1;
                                                                                                            codigo3D.append("\n" +"inicio_func_main:");
                                                                                                            codigo3D.append("\n" +"inicio_bloque_main:");
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(49/*hechizo_principal_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ritual_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ritual_ingredientes ::= COMMA esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*ritual_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_ingredientes ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_ingredientes ::= esencia SPACEGATO nombre_ingrediente ritual_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*lista_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // creacion_ingredientes ::= error DOTCOMMA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // creacion_ingredientes ::= esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  //Verificar si está duplicada
                                                                                                                boolean res = verificarVariableDuplicada(n.toString());
                                                                                                                if(res == true){
                                                                                                                    System.out.println("Error Semántico: Variable: <<" + n.toString()+ ">> ya se encuentra declarada.");
                                                                                                                }else{ 
                                                                                                                    //Añade la variable a Tabla de Símbolos de la Función:
                                                                                                                    listaTablaSimbolos.get(currentHash).add("Tipo: " +  e.toString() + " Nombre Identificador: " + n.toString() ); 
                                                                                                                    //Creación de Codigo 3-D
                                                                                                                    codigo3D.append("\n" + "data_" + e.toString() + " " + n.toString());
                                                                                                                }    
                                                                                                            
              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // creacion_ingredientes ::= GLOBALIO SPACEGATO esencia SPACEGATO nombre_ingrediente DOTCOMMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  //Verificar si está duplicada
                                                                                                                boolean res = verificarVariableDuplicada(n.toString());
                                                                                                                if(res == true){
                                                                                                                   System.out.println("Error Semántico: Variable: <<" + n.toString()+ ">> ya se encuentra declarada.");
                                                                                                                }else{
                                                                                                                    //Añade la variable a Tabla de Símbolos de la Función:
                                                                                                                    listaTablaSimbolos.get(globalHash).add("Tipo: "  + e.toString() + " Nombre Identificador: " + n.toString()); 
                                                                                                                    //Creación de Codigo 3-D
                                                                                                                    codigo3D.append("\n" + "global_data_" + e.toString() + " " + n.toString());
                                                                                                                }
                                                                                                                
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(19/*creacion_ingredientes*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // esencia ::= RUNAS 
            {
              Object RESULT = null;
		RESULT = "Runas"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // esencia ::= RUNA 
            {
              Object RESULT = null;
		RESULT = "Runa"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // esencia ::= SINOX 
            {
              Object RESULT = null;
		RESULT = "SiNox"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // esencia ::= NUMERADECIMUS 
            {
              Object RESULT = null;
		RESULT = "NumeraDecimus"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // esencia ::= NUMERA 
            {
              Object RESULT = null;
		RESULT = "Numera"; 
              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*esencia*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // hechizo ::= error KEYR 
            {
              Object RESULT = null;
		System.out.println("Error Semántico: Función no tiene valor de Retorno.");
                                                                                                              
              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // hechizo ::= creacion_ingredientes 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // hechizo ::= hechizo_encabezado_prima conjuros conjuro_revertir KEYR 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int crright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		String[] partesOperando = cr.toString().split(":");
                                                                                                               if(!(partesOperando[0].equals(currentType))){
                                                                                                                    System.out.println("Error Semántico: Valor de retorno no es igual al Tipo de Dato de la Función.");
                                                                                                               }else{
                                                                                                                    //Creación de Codigo 3-D
                                                                                                                    int contadorfinal = stackLlaves.pop();
                                                                                                                    codigo3D.append("\n" +"final_" + n.toString() + "bloque"+ (currentBloque++) +":");
                                                                                                                    codigo3D.append("\n" +"final_FUNC"+ contadorfinal +":");
                                                                                                                      
                                                                                                               }
                                                                                                              
              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*hechizo*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // hechizo_encabezado_prima ::= hechizo_encabezado PARENL lista_ingredientes PARENR KEYL 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		                                                                                                               
                                                                                                                RESULT = n;
                                                                                                                //Creación de Codigo 3-D
                                                                                                                codigo3D.append("\n" +"inicio_"+n.toString() + "_bloque_"+ (currentBloque++) +":");
                                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(52/*hechizo_encabezado_prima*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // hechizo_encabezado ::= SPACEGATO HECHIZO SPACEGATO esencia SPACEGATO nombre_ingrediente 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		
                                                                                                 String res = verificarTipoFuncion(n.toString());
                                                                                                 //System.out.println("REEEES:" + res);
                                                                                                 if(!res.equals("null") && currentFunc > 1){
                                                                                                    System.out.println("Error Semántico: Función ya se encuentra declarada.");
                                                                                                 }else{
                                                                                                        //System.out.println("Inicio de Función + n.toString()");
                                                                                                        String type = e.toString();
                                                                                                        if(!(type.equals("Numera") || type.equals("NumeraDecimus") || type.equals("SiNox") || type.equals("Runas") || type.equals("Runa"))){
                                                                                                            System.out.println("Error Semántico: Tipo de Función no válido.");
                                                                                                        }else{
                                                                                                            //Creación Tabla de Símbolos de la Función:
                                                                                                            currentType = e.toString();
                                                                                                            ArrayList<String> lista = new ArrayList<String>();
                                                                                                            currentHash = n.toString();
                                                                                                            String tipoTabla = "Funcion";
                                                                                                            lista.add(tipoTabla);
                                                                                                            listaTablaSimbolos.put(currentHash, lista); 
                                                                                                            tiposTablaSimbolos.put(currentHash, currentType);

                                                                                                            //Creación de Codigo 3-D
                                                                                                            stackLlaves.push(currentFunc);   
                                                                                                            codigo3D.append("\n" +"inicio_FUNC_" + (currentFunc++) +":");
                                                                                                            RESULT = n;
                                                                                                            
                                                                                                    }
                                                                                                 } 
                                                                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(48/*hechizo_encabezado*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // hechizos ::= 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // hechizos ::= hechizos hechizo 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*hechizos*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Runas ::= STRING_LITERAL 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = s;
              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*Runas*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SiNox ::= FALSE 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "False";
              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SiNox ::= TRUE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		RESULT = "True";
              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*SiNox*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NumeraDecimus ::= NUMERADECIMUSLITERAL 
            {
              Object RESULT = null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = nd;  
                                                   
                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*NumeraDecimus*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Numera ::= NUMERALITERAL 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = n; 
                                                    
                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*Numera*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nombre_ingrediente ::= NOMBREINGREDIENTE 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).value;
		 RESULT = n; 
                                                
              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*nombre_ingrediente*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encantamiento ::= error 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*encantamiento*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encantamiento ::= NT$0 ABRACADABRA hechizos hechizo_principal 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 System.out.println("-=-=-=-=- fin de ejecución -=-=-=-=-"); imprimirTablaSimbolos(); imprimirCodigo3Direcciones(); 
              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*encantamiento*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT = null;

                        //System.out.println("Inicio programa\n");
                        ArrayList<String> lista = new ArrayList<String>();
                        String tipoTabla = "Globales";
                        lista.add(tipoTabla);
                        listaTablaSimbolos.put(currentHash, lista);
                    
              CUP$Sintax$result = new java_cup.runtime.Symbol(60/*NT$0*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= encantamiento EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

